/**
 *
 * carbon-angular v0.0.0 | carbon-components-angular-context-menu.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { CommonModule } from '@angular/common';
import { IconModule } from 'carbon-components-angular/icon';
import { ReplaySubject, Subscription } from 'rxjs';
import { Component, HostBinding, Injectable, EventEmitter, Input, Output, ElementRef, HostListener, ContentChild, Optional, NgModule } from '@angular/core';

var ContextMenuDividerComponent = /** @class */ (function () {
    function ContextMenuDividerComponent() {
        this.dividerClass = true;
        this.role = "separator";
    }
    ContextMenuDividerComponent.decorators = [
        { type: Component, args: [{
                    selector: "ibm-context-menu-divider",
                    template: "",
                    styles: ["\n\t\t:host {\n\t\t\tdisplay: list-item;\n\t\t\tlist-style: none;\n\t\t}\n\t"]
                }] }
    ];
    ContextMenuDividerComponent.propDecorators = {
        dividerClass: [{ type: HostBinding, args: ["class.bx--context-menu-divider",] }],
        role: [{ type: HostBinding, args: ["attr.role",] }]
    };
    return ContextMenuDividerComponent;
}());

var ContextMenuSelectionService = /** @class */ (function () {
    function ContextMenuSelectionService() {
        this.selectionSubject = new ReplaySubject(1);
        this.value = [];
        this.selectionObservable = this.selectionSubject.asObservable();
    }
    ContextMenuSelectionService.prototype.selectRadio = function (value) {
        if (!value) {
            return;
        }
        this.selectionSubject.next(value);
        this.value = [value];
    };
    ContextMenuSelectionService.prototype.selectCheckbox = function (value) {
        if (!value) {
            return;
        }
        if (this.value.includes(value)) {
            this.value = this.value.filter(function (v) { return v !== value; });
        }
        else {
            this.value.push(value);
        }
        this.selectionSubject.next(this.value);
    };
    ContextMenuSelectionService.prototype.selectCheckboxes = function (value) {
        if (!value) {
            return;
        }
        this.value = value;
        this.selectionSubject.next(value);
    };
    ContextMenuSelectionService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ContextMenuSelectionService.ctorParameters = function () { return []; };
    return ContextMenuSelectionService;
}());

var ContextMenuGroupComponent = /** @class */ (function () {
    function ContextMenuGroupComponent(contextMenuSelectionService) {
        this.contextMenuSelectionService = contextMenuSelectionService;
        this.role = "none";
        this.label = null;
        this.value = [];
        this.type = null;
        this.valueChange = new EventEmitter();
        this.subscription = new Subscription();
    }
    ContextMenuGroupComponent.prototype.ngOnInit = function () {
        var _this = this;
        var selectionObservable = this.contextMenuSelectionService.selectionObservable;
        var subscription = selectionObservable.subscribe(function (value) {
            _this.valueChange.emit(value);
        });
        this.subscription.add(subscription);
    };
    ContextMenuGroupComponent.prototype.ngOnChanges = function (changes) {
        if (changes.value) {
            if (this.type === "radio") {
                this.contextMenuSelectionService.selectRadio(changes.value.currentValue);
            }
            if (this.type === "checkbox") {
                this.contextMenuSelectionService.selectCheckboxes(changes.value.currentValue);
            }
        }
    };
    ContextMenuGroupComponent.prototype.ngOnDestroy = function () {
        this.subscription.unsubscribe();
    };
    ContextMenuGroupComponent.decorators = [
        { type: Component, args: [{
                    selector: "ibm-context-menu-group",
                    template: "\n\t\t<ul role=\"group\" [attr.aria-label]=\"label\">\n\t\t\t<ng-content></ng-content>\n\t\t</ul>\n\t",
                    providers: [ContextMenuSelectionService],
                    styles: ["\n\t\t:host {\n\t\t\tdisplay: list-item;\n\t\t\tlist-style: none;\n\t\t}\n\t"]
                }] }
    ];
    /** @nocollapse */
    ContextMenuGroupComponent.ctorParameters = function () { return [
        { type: ContextMenuSelectionService }
    ]; };
    ContextMenuGroupComponent.propDecorators = {
        role: [{ type: HostBinding, args: ["attr.role",] }],
        label: [{ type: Input }],
        value: [{ type: Input }],
        type: [{ type: Input }],
        valueChange: [{ type: Output }]
    };
    return ContextMenuGroupComponent;
}());

var ContextMenuComponent = /** @class */ (function () {
    function ContextMenuComponent(elementRef) {
        this.elementRef = elementRef;
        this.root = true;
        this.open = false;
        this.position = {
            left: 0,
            top: 0
        };
    }
    ContextMenuComponent.prototype.ngOnChanges = function (changes) {
        if (changes.open && changes.open.currentValue) {
            this.focusMenu();
        }
    };
    ContextMenuComponent.prototype.focusMenu = function () {
        var _this = this;
        // wait until the next tick to let the DOM settle before changing the focus
        var list = this.elementRef.nativeElement.querySelector("ul");
        setTimeout(function () {
            if (_this.root) {
                list.focus();
            }
            else {
                var firstOption = list.querySelector(".bx--context-menu-option");
                firstOption.focus();
            }
        });
    };
    ContextMenuComponent.prototype.handleNavigation = function (event) {
        var list = this.elementRef.nativeElement.querySelector("ul");
        var subMenus = Array.from(list.querySelectorAll("ul[role=menu]"));
        var menuItems = Array.from(list.querySelectorAll(".bx--context-menu-option")).filter(function (menuItem) {
            return !subMenus.some(function (subMenu) { return subMenu.contains(menuItem); });
        });
        var currentIndex = menuItems.findIndex(function (menuItem) { return parseInt(menuItem.getAttribute("tabindex"), 10) === 0; });
        var currentMenuItem = menuItems[currentIndex];
        switch (event.key) {
            case "ArrowDown": {
                if (document.activeElement === list) {
                    menuItems[0].focus();
                }
                else {
                    if (currentIndex !== -1 && currentIndex < menuItems.length - 1) {
                        menuItems[currentIndex + 1].focus();
                    }
                }
                break;
            }
            case "ArrowUp": {
                if (document.activeElement === list) {
                    menuItems[menuItems.length - 1].focus();
                }
                else {
                    if (currentIndex !== -1 && currentIndex > 0) {
                        menuItems[currentIndex - 1].focus();
                    }
                }
                break;
            }
            case "ArrowRight": {
                if (currentIndex !== -1 && subMenus.some(function (subMenu) { return currentMenuItem.contains(subMenu); })) {
                    currentMenuItem.click();
                }
                break;
            }
            case "ArrowLeft": {
                var parent_1 = currentMenuItem.parentElement.closest(".bx--context-menu-option");
                if (parent_1) {
                    parent_1.focus();
                }
                break;
            }
        }
    };
    ContextMenuComponent.prototype.getDimensions = function () {
        var element = this.elementRef.nativeElement.querySelector("ul");
        return element.getBoundingClientRect();
    };
    ContextMenuComponent.decorators = [
        { type: Component, args: [{
                    selector: "ibm-context-menu",
                    template: "\n\t\t<ul\n\t\t\tclass=\"bx--context-menu\"\n\t\t\t[ngClass]=\"{\n\t\t\t\t'bx--context-menu--root': root,\n\t\t\t\t'bx--context-menu--open': open\n\t\t\t}\"\n\t\t\trole=\"menu\"\n\t\t\ttabindex=\"-1\"\n\t\t\t[ngStyle]=\"{\n\t\t\t\t'left.px': position.left,\n\t\t\t\t'top.px': position.top\n\t\t\t}\">\n\t\t\t<ng-content></ng-content>\n\t\t</ul>\n\t"
                }] }
    ];
    /** @nocollapse */
    ContextMenuComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    ContextMenuComponent.propDecorators = {
        root: [{ type: Input }],
        open: [{ type: Input }],
        position: [{ type: Input }],
        handleNavigation: [{ type: HostListener, args: ["keydown", ["$event"],] }]
    };
    return ContextMenuComponent;
}());

var ContextMenuItemComponent = /** @class */ (function () {
    function ContextMenuItemComponent(elementRef, contextMenuSelectionService) {
        this.elementRef = elementRef;
        this.contextMenuSelectionService = contextMenuSelectionService;
        this.optionClass = true;
        this.role = "menuitem";
        this.tabindex = -1;
        this.ariaHasPopup = null;
        this.ariaExpanded = null;
        this.label = "";
        this.info = "";
        this.type = null;
        this.checked = false;
        this.icon = "";
        this.value = "";
        this.checkedChange = new EventEmitter();
        this.hasChildren = false;
        this.selectable = false;
        this.subscriptions = new Subscription();
    }
    ContextMenuItemComponent.prototype.ngOnInit = function () {
        var _this = this;
        switch (this.type) {
            case "checkbox": {
                this.role = "menuitemcheckbox";
                this.selectable = true;
                break;
            }
            case "radio": {
                this.role = "menuitemradio";
                this.selectable = true;
                break;
            }
            default: {
                this.role = "menuitem";
            }
        }
        if (this.type && this.contextMenuSelectionService && this.value) {
            var selectionObservable = this.contextMenuSelectionService.selectionObservable;
            var subscription = selectionObservable.subscribe(function (value) {
                if (_this.type === "radio") {
                    _this.handleSelection(value === _this.value);
                }
                if (_this.type === "checkbox") {
                    _this.handleSelection(value.includes(_this.value));
                }
            });
            this.subscriptions.add(subscription);
        }
    };
    ContextMenuItemComponent.prototype.ngAfterContentInit = function () {
        if (this.childContextMenu) {
            this.hasChildren = true;
            this.ariaHasPopup = true;
            this.ariaExpanded = false;
            this.childContextMenu.root = false;
        }
    };
    ContextMenuItemComponent.prototype.handleClick = function (event) {
        event.stopPropagation();
        if (this.hasChildren) {
            this.openSubMenu();
            this.childContextMenu.focusMenu();
        }
        if (this.type) {
            this.handleSelection(!this.checked);
        }
        if (this.contextMenuSelectionService) {
            if (this.type === "radio") {
                this.contextMenuSelectionService.selectRadio(this.value);
            }
            if (this.type === "checkbox") {
                this.contextMenuSelectionService.selectCheckbox(this.value);
            }
        }
    };
    ContextMenuItemComponent.prototype.handleSelection = function (selected) {
        this.checked = selected;
        this.checkedChange.emit(this.checked);
    };
    ContextMenuItemComponent.prototype.openSubMenu = function () {
        if (this.childContextMenu) {
            this.childContextMenu.open = true;
            this.ariaExpanded = true;
            var dimensions = this.getDimensions();
            this.childContextMenu.position.left = dimensions.left + dimensions.width;
            // subtract 4px to account for margins
            this.childContextMenu.position.top = dimensions.top - 4;
        }
    };
    ContextMenuItemComponent.prototype.closeSubMenu = function () {
        if (this.childContextMenu) {
            this.childContextMenu.open = false;
            this.ariaExpanded = false;
        }
    };
    ContextMenuItemComponent.prototype.handleMouseOver = function () {
        this.openSubMenu();
    };
    ContextMenuItemComponent.prototype.handleMouseOut = function () {
        this.closeSubMenu();
    };
    ContextMenuItemComponent.prototype.handleFocus = function () {
        this.tabindex = 0;
        if (this.hasChildren && this.ariaExpanded) {
            this.closeSubMenu();
        }
    };
    ContextMenuItemComponent.prototype.handleBlur = function () {
        this.tabindex = -1;
    };
    ContextMenuItemComponent.prototype.focusItem = function () {
        this.elementRef.nativeElement.focus();
    };
    ContextMenuItemComponent.prototype.getDimensions = function () {
        var element = this.elementRef.nativeElement.querySelector(".bx--context-menu-option__content");
        return element.getBoundingClientRect();
    };
    ContextMenuItemComponent.prototype.ngOnDestroy = function () {
        this.subscriptions.unsubscribe();
    };
    ContextMenuItemComponent.decorators = [
        { type: Component, args: [{
                    selector: "ibm-context-menu-item",
                    template: "\n\t\t<div class=\"bx--context-menu-option__content\">\n\t\t\t<div class=\"bx--context-menu-option__icon\">\n\t\t\t\t<svg *ngIf=\"selectable && checked\" ibmIcon=\"checkmark\" size=\"16\"></svg>\n\t\t\t\t<svg *ngIf=\"!selectable && icon\" [ibmIcon]=\"icon\" size=\"16\"></svg>\n\t\t\t</div>\n\t\t\t<span class=\"bx--context-menu-option__label\" [title]=\"label\">{{label}}</span>\n\t\t\t<div class=\"bx--context-menu-option__info\">\n\t\t\t\t{{info}}\n\t\t\t\t<svg *ngIf=\"hasChildren\" ibmIcon=\"caret--right\" size=\"16\"></svg>\n\t\t\t</div>\n\t\t</div>\n\t\t<ng-content></ng-content>\n\t",
                    styles: ["\n\t\t:host {\n\t\t\tdisplay: list-item;\n\t\t\tlist-style: none;\n\t\t}\n\t"]
                }] }
    ];
    /** @nocollapse */
    ContextMenuItemComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ContextMenuSelectionService, decorators: [{ type: Optional }] }
    ]; };
    ContextMenuItemComponent.propDecorators = {
        optionClass: [{ type: HostBinding, args: ["class.bx--context-menu-option",] }],
        role: [{ type: HostBinding, args: ["attr.role",] }],
        tabindex: [{ type: HostBinding, args: ["attr.tabindex",] }],
        ariaHasPopup: [{ type: HostBinding, args: ["attr.aria-haspopup",] }],
        ariaExpanded: [{ type: HostBinding, args: ["attr.aria-expanded",] }],
        label: [{ type: Input }],
        info: [{ type: Input }],
        type: [{ type: Input }],
        checked: [{ type: Input }],
        icon: [{ type: Input }],
        value: [{ type: Input }],
        checkedChange: [{ type: Output }],
        childContextMenu: [{ type: ContentChild, args: [ContextMenuComponent, { static: true },] }],
        handleClick: [{ type: HostListener, args: ["keydown.enter", ["$event"],] }, { type: HostListener, args: ["keydown.space", ["$event"],] }, { type: HostListener, args: ["click", ["$event"],] }],
        handleMouseOver: [{ type: HostListener, args: ["mouseover",] }],
        handleMouseOut: [{ type: HostListener, args: ["mouseout",] }],
        handleFocus: [{ type: HostListener, args: ["focus",] }],
        handleBlur: [{ type: HostListener, args: ["blur",] }]
    };
    return ContextMenuItemComponent;
}());

var ContextMenuModule = /** @class */ (function () {
    function ContextMenuModule() {
    }
    ContextMenuModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        ContextMenuDividerComponent,
                        ContextMenuGroupComponent,
                        ContextMenuItemComponent,
                        ContextMenuComponent
                    ],
                    exports: [
                        ContextMenuDividerComponent,
                        ContextMenuGroupComponent,
                        ContextMenuItemComponent,
                        ContextMenuComponent
                    ],
                    imports: [CommonModule, IconModule]
                },] }
    ];
    return ContextMenuModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { ContextMenuSelectionService as ɵa, ContextMenuModule, ContextMenuDividerComponent, ContextMenuGroupComponent, ContextMenuItemComponent, ContextMenuComponent };

//# sourceMappingURL=carbon-components-angular-context-menu.js.map
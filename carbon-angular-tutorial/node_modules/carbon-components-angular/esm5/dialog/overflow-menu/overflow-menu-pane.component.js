/**
 *
 * carbon-angular v0.0.0 | overflow-menu-pane.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import * as tslib_1 from "tslib";
import { Component, HostListener, ElementRef, Optional } from "@angular/core";
import { Dialog } from "../dialog.component";
import { position } from "@carbon/utils-position";
import { isFocusInLastItem, isFocusInFirstItem } from "carbon-components-angular/common";
import { I18n } from "carbon-components-angular/i18n";
import { ExperimentalService } from "carbon-components-angular/experimental";
import { AnimationFrameService, ElementService } from "carbon-components-angular/utils";
import { CloseReasons } from "../dialog-config.interface";
import { closestAttr } from "carbon-components-angular/utils";
/**
 * Extend the `Dialog` component to create an overflow menu.
 *
 * Not used directly. See overflow-menu.component and overflow-menu.directive for more
 */
var OverflowMenuPane = /** @class */ (function (_super) {
    tslib_1.__extends(OverflowMenuPane, _super);
    function OverflowMenuPane(elementRef, i18n, experimental, animationFrameService, 
    // mark `elementService` as optional since making it mandatory would be a breaking change
    elementService) {
        if (animationFrameService === void 0) { animationFrameService = null; }
        if (elementService === void 0) { elementService = null; }
        var _this = _super.call(this, elementRef, elementService, animationFrameService) || this;
        _this.elementRef = elementRef;
        _this.i18n = i18n;
        _this.experimental = experimental;
        _this.animationFrameService = animationFrameService;
        _this.elementService = elementService;
        return _this;
    }
    OverflowMenuPane.prototype.onDialogInit = function () {
        var _this = this;
        var positionOverflowMenu = function (pos) {
            var offset;
            /*
            * 20 is half the width of the overflow menu trigger element.
            * we also move the element by half of it's own width, since
            * position service will try and center everything
            */
            var closestRel = closestAttr("position", ["relative", "fixed", "absolute"], _this.elementRef.nativeElement);
            var topFix = closestRel ? closestRel.getBoundingClientRect().top * -1 : 0;
            var leftFix = closestRel ? closestRel.getBoundingClientRect().left * -1 : 0;
            offset = Math.round(_this.dialog.nativeElement.offsetWidth / 2) - 20;
            if (_this.dialogConfig.flip) {
                return position.addOffset(pos, topFix, (-offset + leftFix));
            }
            return position.addOffset(pos, topFix, (offset + leftFix));
        };
        this.addGap["bottom"] = positionOverflowMenu;
        this.addGap["top"] = positionOverflowMenu;
        if (!this.dialogConfig.menuLabel) {
            this.dialogConfig.menuLabel = this.i18n.get().OVERFLOW_MENU.OVERFLOW;
        }
    };
    OverflowMenuPane.prototype.hostkeys = function (event) {
        var listItems = this.listItems();
        switch (event.key) {
            case "Down": // IE specific value
            case "ArrowDown":
                event.preventDefault();
                if (!isFocusInLastItem(event, listItems)) {
                    var index = listItems.findIndex(function (item) { return item === event.target; });
                    listItems[index + 1].focus();
                }
                else {
                    listItems[0].focus();
                }
                break;
            case "Up": // IE specific value
            case "ArrowUp":
                event.preventDefault();
                if (!isFocusInFirstItem(event, listItems)) {
                    var index = listItems.findIndex(function (item) { return item === event.target; });
                    listItems[index - 1].focus();
                }
                else {
                    listItems[listItems.length - 1].focus();
                }
                break;
            case "Home":
                event.preventDefault();
                listItems[0].focus();
                break;
            case "End":
                event.preventDefault();
                listItems[listItems.length - 1].focus();
                break;
            case "Esc": // IE specific value
            case "Escape":
            case "Tab":
                event.stopImmediatePropagation();
                this.doClose({
                    reason: CloseReasons.interaction,
                    target: event.target
                });
                break;
            default: break;
        }
    };
    OverflowMenuPane.prototype.onClose = function (event) {
        this.doClose({
            reason: CloseReasons.interaction,
            target: event.target
        });
    };
    OverflowMenuPane.prototype.afterDialogViewInit = function () {
        var focusElementList = this.listItems();
        focusElementList.forEach(function (button) {
            // Allows user to set tabindex to 0.
            if (button.getAttribute("tabindex") === null) {
                button.tabIndex = -1;
            }
        });
        if (focusElementList[0]) {
            focusElementList[0].tabIndex = 0;
            focusElementList[0].focus();
        }
    };
    OverflowMenuPane.prototype.listItems = function () {
        var selector = ".bx--overflow-menu-options__option:not([disabled]) .bx--overflow-menu-options__btn";
        return Array.from(this.elementRef.nativeElement.querySelectorAll(selector));
    };
    OverflowMenuPane.decorators = [
        { type: Component, args: [{
                    selector: "ibm-overflow-menu-pane",
                    template: "\n\t\t<ul\n\t\t\t[attr.aria-label]=\"dialogConfig.menuLabel\"\n\t\t\t[attr.data-floating-menu-direction]=\"placement ? placement : null\"\n\t\t\t[ngClass]=\"{'bx--overflow-menu--flip': dialogConfig.flip}\"\n\t\t\trole=\"menu\"\n\t\t\t#dialog\n\t\t\tclass=\"bx--overflow-menu-options bx--overflow-menu-options--open\"\n\t\t\trole=\"menu\"\n\t\t\t(click)=\"onClose($event)\"\n\t\t\t[attr.aria-label]=\"dialogConfig.menuLabel\">\n\t\t\t<ng-template\n\t\t\t\t[ngTemplateOutlet]=\"dialogConfig.content\"\n\t\t\t\t[ngTemplateOutletContext]=\"{overflowMenu: this}\">\n\t\t\t</ng-template>\n\t\t</ul>\n\t"
                }] }
    ];
    /** @nocollapse */
    OverflowMenuPane.ctorParameters = function () { return [
        { type: ElementRef },
        { type: I18n },
        { type: ExperimentalService },
        { type: AnimationFrameService, decorators: [{ type: Optional }] },
        { type: ElementService, decorators: [{ type: Optional }] }
    ]; };
    OverflowMenuPane.propDecorators = {
        hostkeys: [{ type: HostListener, args: ["keydown", ["$event"],] }]
    };
    return OverflowMenuPane;
}(Dialog));
export { OverflowMenuPane };
//# sourceMappingURL=data:application/json;base64,
/**
 *
 * carbon-angular v0.0.0 | table-header-item.class.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import * as tslib_1 from "tslib";
var TableHeaderItem = /** @class */ (function () {
    /**
     * Creates an instance of TableHeaderItem.
     */
    function TableHeaderItem(rawData) {
        var e_1, _a;
        /**
         * Defines if column under this TableHeaderItem should be displayed.
         *
         */
        this.visible = true;
        /**
         * Disables sorting by default.
         *
         */
        this.sorted = false;
        /**
         * Enables sorting on click by default.
         * If false then this column won't show a sorting arrow at all.
         *
         */
        this.sortable = true;
        /**
         * Number of applied filters.
         *
         * `filter()` should set it to appropriate number.
         *
         */
        this.filterCount = 0;
        /**
         * The number of rows to span
         * **NOTE:** not supported by the default carbon table
         */
        this.rowSpan = 1;
        /**
         * The number of columns to span
         */
        this.colSpan = 1;
        /**
         * Style for the column, applied to every element in the column.
         *
         * ngStyle-like format
         *
         */
        this.style = {};
        /**
         * used in `ascending`
         *
         * @protected
         */
        this._ascending = true;
        // defaults so we dont leave things empty
        var defaults = {
            data: "",
            visible: this.visible,
            style: this.style,
            filterCount: this.filterCount,
            filterData: { data: "" }
        };
        // fill our object with provided props, and fallback to defaults
        var data = Object.assign({}, defaults, rawData);
        try {
            for (var _b = tslib_1.__values(Object.getOwnPropertyNames(data)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var property = _c.value;
                if (data.hasOwnProperty(property)) {
                    this[property] = data[property];
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    Object.defineProperty(TableHeaderItem.prototype, "ascending", {
        get: function () {
            return this._ascending;
        },
        /**
         * If true, sort is set to ascending, if false descending will be true.
         *
         */
        set: function (asc) {
            this._ascending = asc;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableHeaderItem.prototype, "descending", {
        get: function () {
            return !this._ascending;
        },
        /**
         * If true, sort is set to descending, if false ascending will be true.
         *
         */
        set: function (desc) {
            this._ascending = !desc;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableHeaderItem.prototype, "title", {
        get: function () {
            if (this._title) {
                return this._title;
            }
            if (!this.data) {
                return "";
            }
            if (typeof this.data === "string") {
                return this.data;
            }
            if (this.data.toString &&
                this.data.constructor !== ({}).constructor) {
                return this.data.toString();
            }
            // data canâ€™t be reasonably converted to an end user readable string
            return "";
        },
        set: function (title) {
            this._title = title;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Used for sorting rows of the table.
     *
     * Override to enable different sorting.
     *
     * < 0 if `one` should go before `two`
     * > 0 if `one` should go after `two`
     * 0 if it doesn't matter (they are the same)
     */
    TableHeaderItem.prototype.compare = function (one, two) {
        if (!one || !two) {
            return 0;
        }
        if (typeof one.data === "string") {
            return one.data.localeCompare(two.data);
        }
        if (one.data < two.data) {
            return -1;
        }
        else if (one.data > two.data) {
            return 1;
        }
        else {
            return 0;
        }
    };
    /**
     * Used to filter rows in the table.
     *
     * Override to make a custom filter.
     *
     * Even though there is just one filter function, there can be multiple filters.
     * When implementing filter, set `filterCount` before returning.
     *
     * `true` to hide the row
     * `false` to show the row
     */
    TableHeaderItem.prototype.filter = function (item) {
        this.filterCount = 0;
        return false;
    };
    return TableHeaderItem;
}());
export { TableHeaderItem };
//# sourceMappingURL=data:application/json;base64,
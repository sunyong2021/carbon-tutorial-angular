/**
 *
 * carbon-angular v0.0.0 | context-menu-item.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, HostBinding, Input, Output, EventEmitter, ElementRef, HostListener, ContentChild, Optional } from "@angular/core";
import { Subscription } from "rxjs";
import { ContextMenuSelectionService } from "./context-menu-selection.service";
import { ContextMenuComponent } from "./context-menu.component";
var ContextMenuItemComponent = /** @class */ (function () {
    function ContextMenuItemComponent(elementRef, contextMenuSelectionService) {
        this.elementRef = elementRef;
        this.contextMenuSelectionService = contextMenuSelectionService;
        this.optionClass = true;
        this.role = "menuitem";
        this.tabindex = -1;
        this.ariaHasPopup = null;
        this.ariaExpanded = null;
        this.label = "";
        this.info = "";
        this.type = null;
        this.checked = false;
        this.icon = "";
        this.value = "";
        this.checkedChange = new EventEmitter();
        this.hasChildren = false;
        this.selectable = false;
        this.subscriptions = new Subscription();
    }
    ContextMenuItemComponent.prototype.ngOnInit = function () {
        var _this = this;
        switch (this.type) {
            case "checkbox": {
                this.role = "menuitemcheckbox";
                this.selectable = true;
                break;
            }
            case "radio": {
                this.role = "menuitemradio";
                this.selectable = true;
                break;
            }
            default: {
                this.role = "menuitem";
            }
        }
        if (this.type && this.contextMenuSelectionService && this.value) {
            var selectionObservable = this.contextMenuSelectionService.selectionObservable;
            var subscription = selectionObservable.subscribe(function (value) {
                if (_this.type === "radio") {
                    _this.handleSelection(value === _this.value);
                }
                if (_this.type === "checkbox") {
                    _this.handleSelection(value.includes(_this.value));
                }
            });
            this.subscriptions.add(subscription);
        }
    };
    ContextMenuItemComponent.prototype.ngAfterContentInit = function () {
        if (this.childContextMenu) {
            this.hasChildren = true;
            this.ariaHasPopup = true;
            this.ariaExpanded = false;
            this.childContextMenu.root = false;
        }
    };
    ContextMenuItemComponent.prototype.handleClick = function (event) {
        event.stopPropagation();
        if (this.hasChildren) {
            this.openSubMenu();
            this.childContextMenu.focusMenu();
        }
        if (this.type) {
            this.handleSelection(!this.checked);
        }
        if (this.contextMenuSelectionService) {
            if (this.type === "radio") {
                this.contextMenuSelectionService.selectRadio(this.value);
            }
            if (this.type === "checkbox") {
                this.contextMenuSelectionService.selectCheckbox(this.value);
            }
        }
    };
    ContextMenuItemComponent.prototype.handleSelection = function (selected) {
        this.checked = selected;
        this.checkedChange.emit(this.checked);
    };
    ContextMenuItemComponent.prototype.openSubMenu = function () {
        if (this.childContextMenu) {
            this.childContextMenu.open = true;
            this.ariaExpanded = true;
            var dimensions = this.getDimensions();
            this.childContextMenu.position.left = dimensions.left + dimensions.width;
            // subtract 4px to account for margins
            this.childContextMenu.position.top = dimensions.top - 4;
        }
    };
    ContextMenuItemComponent.prototype.closeSubMenu = function () {
        if (this.childContextMenu) {
            this.childContextMenu.open = false;
            this.ariaExpanded = false;
        }
    };
    ContextMenuItemComponent.prototype.handleMouseOver = function () {
        this.openSubMenu();
    };
    ContextMenuItemComponent.prototype.handleMouseOut = function () {
        this.closeSubMenu();
    };
    ContextMenuItemComponent.prototype.handleFocus = function () {
        this.tabindex = 0;
        if (this.hasChildren && this.ariaExpanded) {
            this.closeSubMenu();
        }
    };
    ContextMenuItemComponent.prototype.handleBlur = function () {
        this.tabindex = -1;
    };
    ContextMenuItemComponent.prototype.focusItem = function () {
        this.elementRef.nativeElement.focus();
    };
    ContextMenuItemComponent.prototype.getDimensions = function () {
        var element = this.elementRef.nativeElement.querySelector(".bx--context-menu-option__content");
        return element.getBoundingClientRect();
    };
    ContextMenuItemComponent.prototype.ngOnDestroy = function () {
        this.subscriptions.unsubscribe();
    };
    ContextMenuItemComponent.decorators = [
        { type: Component, args: [{
                    selector: "ibm-context-menu-item",
                    template: "\n\t\t<div class=\"bx--context-menu-option__content\">\n\t\t\t<div class=\"bx--context-menu-option__icon\">\n\t\t\t\t<svg *ngIf=\"selectable && checked\" ibmIcon=\"checkmark\" size=\"16\"></svg>\n\t\t\t\t<svg *ngIf=\"!selectable && icon\" [ibmIcon]=\"icon\" size=\"16\"></svg>\n\t\t\t</div>\n\t\t\t<span class=\"bx--context-menu-option__label\" [title]=\"label\">{{label}}</span>\n\t\t\t<div class=\"bx--context-menu-option__info\">\n\t\t\t\t{{info}}\n\t\t\t\t<svg *ngIf=\"hasChildren\" ibmIcon=\"caret--right\" size=\"16\"></svg>\n\t\t\t</div>\n\t\t</div>\n\t\t<ng-content></ng-content>\n\t",
                    styles: ["\n\t\t:host {\n\t\t\tdisplay: list-item;\n\t\t\tlist-style: none;\n\t\t}\n\t"]
                }] }
    ];
    /** @nocollapse */
    ContextMenuItemComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ContextMenuSelectionService, decorators: [{ type: Optional }] }
    ]; };
    ContextMenuItemComponent.propDecorators = {
        optionClass: [{ type: HostBinding, args: ["class.bx--context-menu-option",] }],
        role: [{ type: HostBinding, args: ["attr.role",] }],
        tabindex: [{ type: HostBinding, args: ["attr.tabindex",] }],
        ariaHasPopup: [{ type: HostBinding, args: ["attr.aria-haspopup",] }],
        ariaExpanded: [{ type: HostBinding, args: ["attr.aria-expanded",] }],
        label: [{ type: Input }],
        info: [{ type: Input }],
        type: [{ type: Input }],
        checked: [{ type: Input }],
        icon: [{ type: Input }],
        value: [{ type: Input }],
        checkedChange: [{ type: Output }],
        childContextMenu: [{ type: ContentChild, args: [ContextMenuComponent, { static: true },] }],
        handleClick: [{ type: HostListener, args: ["keydown.enter", ["$event"],] }, { type: HostListener, args: ["keydown.space", ["$event"],] }, { type: HostListener, args: ["click", ["$event"],] }],
        handleMouseOver: [{ type: HostListener, args: ["mouseover",] }],
        handleMouseOut: [{ type: HostListener, args: ["mouseout",] }],
        handleFocus: [{ type: HostListener, args: ["focus",] }],
        handleBlur: [{ type: HostListener, args: ["blur",] }]
    };
    return ContextMenuItemComponent;
}());
export { ContextMenuItemComponent };
//# sourceMappingURL=data:application/json;base64,
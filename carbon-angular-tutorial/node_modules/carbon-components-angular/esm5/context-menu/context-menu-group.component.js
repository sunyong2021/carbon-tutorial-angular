/**
 *
 * carbon-angular v0.0.0 | context-menu-group.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, EventEmitter, HostBinding, Input, Output } from "@angular/core";
import { Subscription } from "rxjs";
import { ContextMenuSelectionService } from "./context-menu-selection.service";
var ContextMenuGroupComponent = /** @class */ (function () {
    function ContextMenuGroupComponent(contextMenuSelectionService) {
        this.contextMenuSelectionService = contextMenuSelectionService;
        this.role = "none";
        this.label = null;
        this.value = [];
        this.type = null;
        this.valueChange = new EventEmitter();
        this.subscription = new Subscription();
    }
    ContextMenuGroupComponent.prototype.ngOnInit = function () {
        var _this = this;
        var selectionObservable = this.contextMenuSelectionService.selectionObservable;
        var subscription = selectionObservable.subscribe(function (value) {
            _this.valueChange.emit(value);
        });
        this.subscription.add(subscription);
    };
    ContextMenuGroupComponent.prototype.ngOnChanges = function (changes) {
        if (changes.value) {
            if (this.type === "radio") {
                this.contextMenuSelectionService.selectRadio(changes.value.currentValue);
            }
            if (this.type === "checkbox") {
                this.contextMenuSelectionService.selectCheckboxes(changes.value.currentValue);
            }
        }
    };
    ContextMenuGroupComponent.prototype.ngOnDestroy = function () {
        this.subscription.unsubscribe();
    };
    ContextMenuGroupComponent.decorators = [
        { type: Component, args: [{
                    selector: "ibm-context-menu-group",
                    template: "\n\t\t<ul role=\"group\" [attr.aria-label]=\"label\">\n\t\t\t<ng-content></ng-content>\n\t\t</ul>\n\t",
                    providers: [ContextMenuSelectionService],
                    styles: ["\n\t\t:host {\n\t\t\tdisplay: list-item;\n\t\t\tlist-style: none;\n\t\t}\n\t"]
                }] }
    ];
    /** @nocollapse */
    ContextMenuGroupComponent.ctorParameters = function () { return [
        { type: ContextMenuSelectionService }
    ]; };
    ContextMenuGroupComponent.propDecorators = {
        role: [{ type: HostBinding, args: ["attr.role",] }],
        label: [{ type: Input }],
        value: [{ type: Input }],
        type: [{ type: Input }],
        valueChange: [{ type: Output }]
    };
    return ContextMenuGroupComponent;
}());
export { ContextMenuGroupComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGV4dC1tZW51LWdyb3VwLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2NhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXIvY29udGV4dC1tZW51LyIsInNvdXJjZXMiOlsiY29udGV4dC1tZW51LWdyb3VwLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ04sU0FBUyxFQUNULFlBQVksRUFDWixXQUFXLEVBQ1gsS0FBSyxFQUlMLE1BQU0sRUFFTixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3BDLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBRS9FO0lBeUJDLG1DQUFzQiwyQkFBd0Q7UUFBeEQsZ0NBQTJCLEdBQTNCLDJCQUEyQixDQUE2QjtRQVRwRCxTQUFJLEdBQUcsTUFBTSxDQUFDO1FBRS9CLFVBQUssR0FBRyxJQUFJLENBQUM7UUFDYixVQUFLLEdBQVUsRUFBRSxDQUFDO1FBQ2xCLFNBQUksR0FBZ0MsSUFBSSxDQUFDO1FBQ3hDLGdCQUFXLEdBQUcsSUFBSSxZQUFZLEVBQVMsQ0FBQztRQUUxQyxpQkFBWSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7SUFFd0MsQ0FBQztJQUVuRiw0Q0FBUSxHQUFSO1FBQUEsaUJBTUM7UUFMUSxJQUFBLDBFQUFtQixDQUFzQztRQUNqRSxJQUFNLFlBQVksR0FBRyxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsVUFBQSxLQUFLO1lBQ3ZELEtBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzlCLENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUVELCtDQUFXLEdBQVgsVUFBWSxPQUFzQjtRQUNqQyxJQUFJLE9BQU8sQ0FBQyxLQUFLLEVBQUU7WUFDbEIsSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLE9BQU8sRUFBRTtnQkFDMUIsSUFBSSxDQUFDLDJCQUEyQixDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO2FBQ3pFO1lBRUQsSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLFVBQVUsRUFBRTtnQkFDN0IsSUFBSSxDQUFDLDJCQUEyQixDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7YUFDOUU7U0FDRDtJQUNGLENBQUM7SUFFRCwrQ0FBVyxHQUFYO1FBQ0MsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNqQyxDQUFDOztnQkFqREQsU0FBUyxTQUFDO29CQUNWLFFBQVEsRUFBRSx3QkFBd0I7b0JBQ2xDLFFBQVEsRUFBRSx1R0FJVDtvQkFPRCxTQUFTLEVBQUUsQ0FBQywyQkFBMkIsQ0FBQzs2QkFOL0IsOEVBS1I7aUJBRUQ7Ozs7Z0JBaEJRLDJCQUEyQjs7O3VCQWtCbEMsV0FBVyxTQUFDLFdBQVc7d0JBRXZCLEtBQUs7d0JBQ0wsS0FBSzt1QkFDTCxLQUFLOzhCQUNMLE1BQU07O0lBNkJSLGdDQUFDO0NBQUEsQUFsREQsSUFrREM7U0FuQ1kseUJBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcblx0Q29tcG9uZW50LFxuXHRFdmVudEVtaXR0ZXIsXG5cdEhvc3RCaW5kaW5nLFxuXHRJbnB1dCxcblx0T25DaGFuZ2VzLFxuXHRPbkRlc3Ryb3ksXG5cdE9uSW5pdCxcblx0T3V0cHV0LFxuXHRTaW1wbGVDaGFuZ2VzXG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tIFwicnhqc1wiO1xuaW1wb3J0IHsgQ29udGV4dE1lbnVTZWxlY3Rpb25TZXJ2aWNlIH0gZnJvbSBcIi4vY29udGV4dC1tZW51LXNlbGVjdGlvbi5zZXJ2aWNlXCI7XG5cbkBDb21wb25lbnQoe1xuXHRzZWxlY3RvcjogXCJpYm0tY29udGV4dC1tZW51LWdyb3VwXCIsXG5cdHRlbXBsYXRlOiBgXG5cdFx0PHVsIHJvbGU9XCJncm91cFwiIFthdHRyLmFyaWEtbGFiZWxdPVwibGFiZWxcIj5cblx0XHRcdDxuZy1jb250ZW50PjwvbmctY29udGVudD5cblx0XHQ8L3VsPlxuXHRgLFxuXHRzdHlsZXM6IFtgXG5cdFx0Omhvc3Qge1xuXHRcdFx0ZGlzcGxheTogbGlzdC1pdGVtO1xuXHRcdFx0bGlzdC1zdHlsZTogbm9uZTtcblx0XHR9XG5cdGBdLFxuXHRwcm92aWRlcnM6IFtDb250ZXh0TWVudVNlbGVjdGlvblNlcnZpY2VdXG59KVxuZXhwb3J0IGNsYXNzIENvbnRleHRNZW51R3JvdXBDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcblx0QEhvc3RCaW5kaW5nKFwiYXR0ci5yb2xlXCIpIHJvbGUgPSBcIm5vbmVcIjtcblxuXHRASW5wdXQoKSBsYWJlbCA9IG51bGw7XG5cdEBJbnB1dCgpIHZhbHVlOiBhbnlbXSA9IFtdO1xuXHRASW5wdXQoKSB0eXBlOiBudWxsIHwgXCJyYWRpb1wiIHwgXCJjaGVja2JveFwiID0gbnVsbDtcblx0QE91dHB1dCgpIHZhbHVlQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxhbnlbXT4oKTtcblxuXHRwcml2YXRlIHN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24oKTtcblxuXHRjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgY29udGV4dE1lbnVTZWxlY3Rpb25TZXJ2aWNlOiBDb250ZXh0TWVudVNlbGVjdGlvblNlcnZpY2UpIHsgfVxuXG5cdG5nT25Jbml0KCkge1xuXHRcdGNvbnN0IHsgc2VsZWN0aW9uT2JzZXJ2YWJsZSB9ID0gdGhpcy5jb250ZXh0TWVudVNlbGVjdGlvblNlcnZpY2U7XG5cdFx0Y29uc3Qgc3Vic2NyaXB0aW9uID0gc2VsZWN0aW9uT2JzZXJ2YWJsZS5zdWJzY3JpYmUodmFsdWUgPT4ge1xuXHRcdFx0dGhpcy52YWx1ZUNoYW5nZS5lbWl0KHZhbHVlKTtcblx0XHR9KTtcblx0XHR0aGlzLnN1YnNjcmlwdGlvbi5hZGQoc3Vic2NyaXB0aW9uKTtcblx0fVxuXG5cdG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcblx0XHRpZiAoY2hhbmdlcy52YWx1ZSkge1xuXHRcdFx0aWYgKHRoaXMudHlwZSA9PT0gXCJyYWRpb1wiKSB7XG5cdFx0XHRcdHRoaXMuY29udGV4dE1lbnVTZWxlY3Rpb25TZXJ2aWNlLnNlbGVjdFJhZGlvKGNoYW5nZXMudmFsdWUuY3VycmVudFZhbHVlKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHRoaXMudHlwZSA9PT0gXCJjaGVja2JveFwiKSB7XG5cdFx0XHRcdHRoaXMuY29udGV4dE1lbnVTZWxlY3Rpb25TZXJ2aWNlLnNlbGVjdENoZWNrYm94ZXMoY2hhbmdlcy52YWx1ZS5jdXJyZW50VmFsdWUpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdG5nT25EZXN0cm95KCkge1xuXHRcdHRoaXMuc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG5cdH1cbn1cbiJdfQ==
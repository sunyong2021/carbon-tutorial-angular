/**
 *
 * carbon-angular v0.0.0 | button.directive.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Directive, HostBinding, Input } from "@angular/core";
/**
 * A convenience directive for applying styling to a button.
 *
 * [See demo](../../?path=/story/button--basic)
 *
 * Example:
 *
 * ```html
 * <button ibmButton>A button</button>
 * <button ibmButton="secondary">A secondary button</button>
 * ```
 *
 * See the [vanilla carbon docs](http://www.carbondesignsystem.com/components/button/code) for more detail.
 *
 * <example-url>../../iframe.html?id=button--basic</example-url>
 */
export class Button {
    constructor() {
        /**
         * sets the button type
         */
        this.ibmButton = "primary";
        /**
         * If assistive text is used, this specifies the placement.
         * Possible placements are `top`, `bottom`, `left`, `right`.
         * If assistive text is not used, this can be left undefined.
         */
        this.assistiveTextPlacement = "top";
        /**
         * If assistive text is used, this specifies the alignment.
         * Possible alignments are `center`, `start`, `end`.
         * If assistive text is not used, this can be left undefined.
         */
        this.assistiveTextAlignment = "center";
        /**
         * Set to `true` for a skeleton state button
         */
        this.skeleton = false;
        /**
         * Set to `true` if the button contains only an icon, and a span with `.bx--assistive-text` containing the content
         * For example:
         *
         * <button ibmButton="primary" [iconOnly]="true" [hasAssistiveText]="true">
         *    <svg class="bx--btn__icon" ibmIconCopy size="20"></svg>
         *    <span class="bx--assistive-text">Icon description</span>
         * </button>
         */
        this.iconOnly = false;
        /**
         * Set to `true` for a "expressive" style button
         */
        this.isExpressive = false;
        this.toolbarAction = false;
        this.overflowMenu = false;
        /**
         * `hasAssistiveText` input specifies whether the button contains assistive text or not.
         * Assistive text can be utilized as follows:
         * ```typescript
         *	<button
         *		ibmButton="tertiary"
         *		[iconOnly]="true"
         *		[hasAssistiveText]="true"
         *		assistiveTextPlacement="top"
         *		assistiveTextAlignment="center">
         *		<svg class="bx--btn__icon" ibmIconCopy size="20"></svg>
         *		<span class="bx--assistive-text">Icon description</span>
         *	</button>
         * ```
         */
        this.hasAssistiveText = false;
    }
    // a whole lot of HostBindings ... this way we don't have to touch the elementRef directly
    get baseClass() {
        return !this.toolbarAction;
    }
    get primaryButton() {
        return this.ibmButton === "primary";
    }
    get secondaryButton() {
        return this.ibmButton === "secondary";
    }
    get tertiaryButton() {
        return this.ibmButton === "tertiary";
    }
    get ghostButton() {
        return this.ibmButton === "ghost";
    }
    get dangerButton() {
        return this.ibmButton === "danger" || this.ibmButton === "danger--primary";
    }
    get dangerTertiary() {
        return this.ibmButton === "danger--tertiary";
    }
    get dangerGhost() {
        return this.ibmButton === "danger--ghost";
    }
    get smallSize() {
        return this.size === "sm";
    }
    get largeSize() {
        return this.size === "lg";
    }
    get extraLargeSize() {
        return this.size === "xl";
    }
    get fieldSize() {
        return this.size === "field";
    }
    get isAssistiveTextCenterAligned() {
        return this.hasAssistiveText && this.assistiveTextAlignment === "center";
    }
    get isAssistiveTextStartAligned() {
        return this.hasAssistiveText && this.assistiveTextAlignment === "start";
    }
    get isAssistiveTextEndAligned() {
        return this.hasAssistiveText && this.assistiveTextAlignment === "end";
    }
    get isAssistiveTextTopPositioned() {
        return this.hasAssistiveText && this.assistiveTextPlacement === "top";
    }
    get isAssistiveTextBottomPositioned() {
        return this.hasAssistiveText && this.assistiveTextPlacement === "bottom";
    }
    get isAssistiveTextLeftPositioned() {
        return this.hasAssistiveText && this.assistiveTextPlacement === "left";
    }
    get isAssistiveTextRightPositioned() {
        return this.hasAssistiveText && this.assistiveTextPlacement === "right";
    }
    ngOnInit() {
        if (!this.ibmButton) {
            this.ibmButton = "primary";
        }
    }
}
Button.decorators = [
    { type: Directive, args: [{
                selector: "[ibmButton]"
            },] }
];
Button.propDecorators = {
    ibmButton: [{ type: Input }],
    size: [{ type: Input }],
    assistiveTextPlacement: [{ type: Input }],
    assistiveTextAlignment: [{ type: Input }],
    skeleton: [{ type: HostBinding, args: ["class.bx--skeleton",] }, { type: Input }],
    iconOnly: [{ type: HostBinding, args: ["class.bx--btn--icon-only",] }, { type: Input }],
    isExpressive: [{ type: HostBinding, args: ["class.bx--btn--expressive",] }, { type: Input }],
    baseClass: [{ type: HostBinding, args: ["class.bx--btn",] }],
    primaryButton: [{ type: HostBinding, args: ["class.bx--btn--primary",] }],
    secondaryButton: [{ type: HostBinding, args: ["class.bx--btn--secondary",] }],
    tertiaryButton: [{ type: HostBinding, args: ["class.bx--btn--tertiary",] }],
    ghostButton: [{ type: HostBinding, args: ["class.bx--btn--ghost",] }],
    dangerButton: [{ type: HostBinding, args: ["class.bx--btn--danger",] }],
    dangerTertiary: [{ type: HostBinding, args: ["class.bx--btn--danger--tertiary",] }],
    dangerGhost: [{ type: HostBinding, args: ["class.bx--btn--danger--ghost",] }],
    smallSize: [{ type: HostBinding, args: ["class.bx--btn--sm",] }],
    largeSize: [{ type: HostBinding, args: ["class.bx--btn--lg",] }],
    extraLargeSize: [{ type: HostBinding, args: ["class.bx--btn--xl",] }],
    fieldSize: [{ type: HostBinding, args: ["class.bx--btn--field",] }],
    toolbarAction: [{ type: HostBinding, args: ["class.bx--toolbar-action",] }],
    overflowMenu: [{ type: HostBinding, args: ["class.bx--overflow-menu",] }],
    hasAssistiveText: [{ type: HostBinding, args: ["class.bx--tooltip__trigger",] }, { type: HostBinding, args: ["class.bx--tooltip--a11y",] }, { type: Input }],
    isAssistiveTextCenterAligned: [{ type: HostBinding, args: ["class.bx--tooltip--align-center",] }],
    isAssistiveTextStartAligned: [{ type: HostBinding, args: ["class.bx--tooltip--align-start",] }],
    isAssistiveTextEndAligned: [{ type: HostBinding, args: ["class.bx--tooltip--align-end",] }],
    isAssistiveTextTopPositioned: [{ type: HostBinding, args: ["class.bx--tooltip--top",] }],
    isAssistiveTextBottomPositioned: [{ type: HostBinding, args: ["class.bx--tooltip--bottom",] }],
    isAssistiveTextLeftPositioned: [{ type: HostBinding, args: ["class.bx--tooltip--left",] }],
    isAssistiveTextRightPositioned: [{ type: HostBinding, args: ["class.bx--tooltip--right",] }]
};
//# sourceMappingURL=data:application/json;base64,
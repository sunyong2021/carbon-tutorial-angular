/**
 *
 * carbon-angular v0.0.0 | search.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, EventEmitter, Output, HostBinding, ElementRef, HostListener, ViewChild } from "@angular/core";
import { NG_VALUE_ACCESSOR } from "@angular/forms";
import { I18n } from "carbon-components-angular/i18n";
/**
 * [See demo](../../?path=/story/search--basic)
 *
 * <example-url>../../iframe.html?id=search--basic</example-url>
 */
export class Search {
    /**
     * Creates an instance of `Search`.
     * @param i18n The i18n translations.
     */
    constructor(elementRef, i18n) {
        this.elementRef = elementRef;
        this.i18n = i18n;
        /**
         * `light` or `dark` search theme.
         */
        this.theme = "dark";
        /**
         * Set to `true` for a disabled search input.
         */
        this.disabled = false;
        /**
         * Set to `true` for a toolbar search component.
         */
        this.toolbar = false;
        /**
         * Set to `true` for a loading search component.
         */
        this.skeleton = false;
        /**
         * Set to `true` to expand the toolbar search component.
         */
        this.active = false;
        /**
         * Specifies whether the search component is used in the table toolbar.
         */
        this.tableSearch = false;
        /**
         * The unique id for the search component.
         */
        this.id = `search-${Search.searchCount}`;
        /**
         * Sets the value attribute on the `input` element.
         */
        this.value = "";
        /**
         * Sets the autocomplete attribute on the `input` element.
         * For reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete#Values
         */
        this.autocomplete = "on";
        /**
         * Sets the text inside the `label` tag.
         */
        this.label = this.i18n.get().SEARCH.LABEL;
        /**
         * Sets the placeholder attribute on the `input` element.
         */
        this.placeholder = this.i18n.get().SEARCH.PLACEHOLDER;
        /**
         * Used to set the `title` attribute of the clear button.
         */
        this.clearButtonTitle = this.i18n.get().SEARCH.CLEAR_BUTTON;
        /**
         * Title for the search trigger
         */
        this.searchTitle = "";
        /**
         * Emits an event when value is changed.
         */
        this.valueChange = new EventEmitter();
        this.open = new EventEmitter();
        /**
         * Emits an event when the clear button is clicked.
         */
        this.clear = new EventEmitter();
        /**
         * Emits an event on enter.
         */
        this.search = new EventEmitter();
        /**
         * Sets `true` when composing text via IME.
         */
        this.isComposing = false;
        this._size = "md";
        /**
         * Called when search input is blurred. Needed to properly implement `ControlValueAccessor`.
         */
        this.onTouched = () => { };
        /**
         * Method set in `registerOnChange` to propagate changes back to the form.
         */
        this.propagateChange = (_) => { };
        Search.searchCount++;
    }
    get containerClass() { return !this.toolbar; }
    /**
     * Size of the search field.
     */
    set size(value) {
        this._size = value;
    }
    get size() {
        return this._size;
    }
    /**
     * This is the initial value set to the component
     * @param value The input value.
     */
    writeValue(value) {
        this.value = value;
    }
    /**
     * Sets a method in order to propagate changes back to the form.
     */
    registerOnChange(fn) {
        this.propagateChange = fn;
    }
    /**
     * Registers a callback to be triggered when the control has been touched.
     * @param fn Callback to be triggered when the search input is touched.
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * Called when text is written in the input.
     * @param search The input text.
     */
    onSearch(search) {
        if (this.isComposing) { // check for IME use
            return;
        }
        this.value = search;
        this.doValueChange();
    }
    /**
     * Called on enter.
     */
    onEnter() {
        this.search.emit(this.value);
    }
    /**
     * Called when clear button is clicked.
     */
    clearSearch() {
        this.value = "";
        this.clear.emit();
        this.propagateChange(this.value);
    }
    doValueChange() {
        this.valueChange.emit(this.value);
        this.propagateChange(this.value);
    }
    openSearch() {
        this.active = true;
        this.open.emit(this.active);
        setTimeout(() => this.inputRef.nativeElement.focus());
    }
    keyDown(event) {
        if (this.toolbar) {
            if (event.key === "Escape") {
                this.active = false;
            }
            else if (event.key === "Enter") {
                this.openSearch();
            }
        }
    }
    focusOut(event) {
        this.onTouched();
        if (this.toolbar &&
            this.inputRef &&
            this.inputRef.nativeElement.value === "" &&
            event.relatedTarget === null) {
            this.active = false;
            this.open.emit(this.active);
        }
    }
    /**
     * Called when using IME composition.
     */
    compositionStart(event) {
        this.isComposing = true;
    }
    /**
     * Called when IME composition finishes.
     */
    compositionEnd(event) {
        this.isComposing = false;
        this.onSearch(this.value + event.data);
    }
}
/**
 * Variable used for creating unique ids for search components.
 */
Search.searchCount = 0;
Search.decorators = [
    { type: Component, args: [{
                selector: "ibm-search",
                template: "<div\n\tclass=\"bx--search\"\n\t[ngClass]=\"{\n\t\t'bx--search--sm': size === 'sm',\n\t\t'bx--search--lg': size === 'md',\n\t\t'bx--search--xl': size === 'xl',\n\t\t'bx--search--light': theme === 'light',\n\t\t'bx--skeleton': skeleton,\n\t\t'bx--toolbar-search': toolbar,\n\t\t'bx--toolbar-search--active': toolbar && active\n\t}\"\n\trole=\"search\"\n\t[attr.aria-label]=\"ariaLabel\"\n\ttabindex=\"0\"\n\t(click)=\"openSearch()\">\n\t<label class=\"bx--label\" [for]=\"id\">{{label}}</label>\n\n\t<div *ngIf=\"skeleton; else enableInput\" class=\"bx--search-input\"></div>\n\t<ng-template #enableInput>\n\t\t<input\n\t\t\t#input\n\t\t\tclass=\"bx--search-input\"\n\t\t\t[type]=\"tableSearch || !toolbar ? 'text' : 'search'\"\n\t\t\t[id]=\"id\"\n\t\t\t[value]=\"value\"\n\t\t\t[autocomplete]=\"autocomplete\"\n\t\t\t[placeholder]=\"placeholder\"\n\t\t\t[disabled]=\"disabled\"\n\t\t\t[required]=\"required\"\n\t\t\t(input)=\"onSearch($event.target.value)\"\n\t\t\t(keyup.enter)=\"onEnter()\"/>\n\t\t<button\n\t\t\t*ngIf=\"!tableSearch && toolbar\"\n\t\t\tclass=\"bx--toolbar-search__btn\"\n\t\t\t(click)=\"openSearch()\"\n\t\t\taria-label=\"Open search\">\n\t\t\t<svg ibmIcon=\"search\" size=\"16\" class=\"bx--search-magnifier-icon\"></svg>\n\t\t</button>\n\t\t<svg\n\t\t\tibmIcon=\"search\"\n\t\t\t*ngIf=\"tableSearch || !toolbar\"\n\t\t\tclass=\"bx--search-magnifier-icon\"\n\t\t\tsize=\"16\">\n\t\t</svg>\n\t</ng-template>\n\n\t<button\n\t\t*ngIf=\"tableSearch || !toolbar\"\n\t\tclass=\"bx--search-close\"\n\t\t[ngClass]=\"{\n\t\t\t'bx--search-close--hidden': !value || value.length === 0\n\t\t}\"\n\t\t[title]=\"clearButtonTitle\"\n\t\t(click)=\"clearSearch()\">\n\t\t<span class=\"bx--visually-hidden\">{{ clearButtonTitle }}</span>\n\t\t<svg ibmIcon=\"close\" size=\"16\"></svg>\n\t</button>\n</div>\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: Search,
                        multi: true
                    }
                ]
            }] }
];
/** @nocollapse */
Search.ctorParameters = () => [
    { type: ElementRef },
    { type: I18n }
];
Search.propDecorators = {
    containerClass: [{ type: HostBinding, args: ["class.bx--form-item",] }],
    theme: [{ type: Input }],
    size: [{ type: Input }],
    disabled: [{ type: Input }],
    toolbar: [{ type: Input }],
    skeleton: [{ type: Input }],
    active: [{ type: Input }],
    tableSearch: [{ type: Input }],
    name: [{ type: Input }],
    id: [{ type: Input }],
    required: [{ type: Input }],
    value: [{ type: Input }],
    autocomplete: [{ type: Input }],
    label: [{ type: Input }],
    placeholder: [{ type: Input }],
    clearButtonTitle: [{ type: Input }],
    searchTitle: [{ type: Input }],
    ariaLabel: [{ type: Input }],
    valueChange: [{ type: Output }],
    open: [{ type: Output }],
    clear: [{ type: Output }],
    search: [{ type: Output }],
    inputRef: [{ type: ViewChild, args: ["input", { static: false },] }],
    keyDown: [{ type: HostListener, args: ["keydown", ["$event"],] }],
    focusOut: [{ type: HostListener, args: ["focusout", ["$event"],] }],
    compositionStart: [{ type: HostListener, args: ["compositionstart", ["$event"],] }],
    compositionEnd: [{ type: HostListener, args: ["compositionend", ["$event"],] }]
};
//# sourceMappingURL=data:application/json;base64,
/**
 *
 * carbon-angular v0.0.0 | number.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, HostBinding, EventEmitter, Output, TemplateRef, HostListener } from "@angular/core";
import { NG_VALUE_ACCESSOR } from "@angular/forms";
import { I18n } from "carbon-components-angular/i18n";
/**
 * Used to emit changes performed on number input components.
 */
export class NumberChange {
}
/**
 * [See demo](../../?path=/story/number--basic)
 *
 * <example-url>../../iframe.html?id=number--basic</example-url>
 */
export class NumberComponent {
    /**
     * Creates an instance of `Number`.
     */
    constructor(i18n) {
        this.i18n = i18n;
        this.containerClass = true;
        /**
         * `light` or `dark` number input theme.
         */
        this.theme = "dark";
        /**
         * Set to `true` for a disabled number input.
         */
        this.disabled = false;
        /**
         * Set to `true` for a loading number component.
         */
        this.skeleton = false;
        /**
         * Set to `true` for an invalid number component.
         */
        this.invalid = false;
        /**
         * The unique id for the number component.
         */
        this.id = `number-${NumberComponent.numberCount}`;
        /**
         * Number input field render size
         */
        this.size = "md";
        /**
         * Sets the min attribute on the `input` element.
         */
        this.min = null;
        /**
         * Sets the max attribute on the `input` element.
         */
        this.max = null;
        /**
         * Sets the amount the number controls increment and decrement by.
         */
        this.step = 1;
        /**
         * Set to `true` to show a warning (contents set by warningText)
         */
        this.warn = false;
        /**
         * Emits event notifying other classes when a change in state occurs in the input.
         */
        this.change = new EventEmitter();
        this._value = 0;
        this._decrementLabel = this.i18n.getOverridable("NUMBER.DECREMENT");
        this._incrementLabel = this.i18n.getOverridable("NUMBER.INCREMENT");
        /**
         * Called when number input is blurred. Needed to properly implement `ControlValueAccessor`.
         */
        this.onTouched = () => { };
        /**
         * Method set in `registerOnChange` to propagate changes back to the form.
         */
        this.propagateChange = (_) => { };
        NumberComponent.numberCount++;
    }
    /**
     * Sets the value attribute on the `input` element.
     */
    set value(v) {
        if (v === "" || v === null) {
            this._value = null;
            return;
        }
        this._value = Number(v);
    }
    get value() {
        return this._value;
    }
    set decrementLabel(value) {
        this._decrementLabel.override(value);
    }
    get decrementLabel() {
        return this._decrementLabel.value;
    }
    set incrementLabel(value) {
        this._incrementLabel.override(value);
    }
    get incrementLabel() {
        return this._incrementLabel.value;
    }
    /**
     * This is the initial value set to the component
     * @param value The input value.
     */
    writeValue(value) {
        this.value = value;
    }
    /**
     * Sets a method in order to propagate changes back to the form.
     */
    registerOnChange(fn) {
        this.propagateChange = fn;
    }
    /**
     * Registers a callback to be triggered when the control has been touched.
     * @param fn Callback to be triggered when the number input is touched.
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    focusOut() {
        this.onTouched();
    }
    /**
     * Sets the disabled state through the model
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * Adds `step` to the current `value`.
     */
    onIncrement() {
        if (this.max === null || this.value + this.step <= this.max) {
            this.value += this.step;
            this.value = parseFloat(this.value.toPrecision(this.precision));
            this.emitChangeEvent();
        }
    }
    /**
     * Subtracts `step` to the current `value`.
     */
    onDecrement() {
        if (this.min === null || this.value - this.step >= this.min) {
            this.value -= this.step;
            this.value = parseFloat(this.value.toPrecision(this.precision));
            this.emitChangeEvent();
        }
    }
    getDecrementLabel() {
        return this._decrementLabel.subject;
    }
    getIncrementLabel() {
        return this._incrementLabel.subject;
    }
    /**
     * Creates a class of `NumberChange` to emit the change in the `Number`.
     */
    emitChangeEvent() {
        let event = new NumberChange();
        event.source = this;
        event.value = this.value;
        this.change.emit(event);
        this.propagateChange(this.value);
    }
    onNumberInputChange(event) {
        this.value = event.target.value;
        this.emitChangeEvent();
    }
    isTemplate(value) {
        return value instanceof TemplateRef;
    }
}
/**
 * Variable used for creating unique ids for number input components.
 */
NumberComponent.numberCount = 0;
NumberComponent.decorators = [
    { type: Component, args: [{
                selector: "ibm-number",
                template: `
		<div
			data-numberinput
			[attr.data-invalid]="(invalid ? true : null)"
			class="bx--number"
			[ngClass]="{
				'bx--number--light': theme === 'light',
				'bx--number--nolabel': !label,
				'bx--number--helpertext': helperText,
				'bx--skeleton' : skeleton,
				'bx--number--sm': size === 'sm',
				'bx--number--xl': size === 'xl'
			}">
			<label *ngIf="skeleton && label" class="bx--label bx--skeleton"></label>
			<label *ngIf="!skeleton && label" [for]="id" class="bx--label">
				<ng-container *ngIf="!isTemplate(label)">{{label}}</ng-container>
				<ng-template *ngIf="isTemplate(label)" [ngTemplateOutlet]="label"></ng-template>
			</label>
			<div
				class="bx--number__input-wrapper"
				[ngClass]="{
					'bx--number__input-wrapper--warning': warn
				}">
				<input
					type="number"
					[id]="id"
					[value]="value"
					[attr.min]="min"
					[attr.max]="max"
					[attr.step]="step"
					[disabled]="disabled"
					[required]="required"
					(input)="onNumberInputChange($event)"/>
				<svg
					*ngIf="!skeleton && !warn && invalid"
					ibmIcon="warning--filled"
					size="16"
					class="bx--number__invalid">
				</svg>
				<svg
					*ngIf="!skeleton && !invalid && warn"
					ibmIcon="warning--alt--filled"
					size="16"
					class="bx--number__invalid bx--number__invalid--warning">
				</svg>
				<div *ngIf="!skeleton" class="bx--number__controls">
					<button
						class="bx--number__control-btn down-icon"
						type="button"
						aria-live="polite"
						aria-atomic="true"
						[attr.aria-label]="getDecrementLabel() | async"
						(click)="onDecrement()">
						<svg ibmIcon="subtract" size="16"></svg>
					</button>
					<div class="bx--number__rule-divider"></div>
					<button
						class="bx--number__control-btn up-icon"
						type="button"
						aria-live="polite"
						aria-atomic="true"
						[attr.aria-label]="getIncrementLabel() | async"
						(click)="onIncrement()">
						<svg ibmIcon="add" size="16"></svg>
					</button>
					<div class="bx--number__rule-divider"></div>
				</div>
			</div>
			<div *ngIf="helperText && !invalid && !warn" class="bx--form__helper-text">
				<ng-container *ngIf="!isTemplate(helperText)">{{helperText}}</ng-container>
				<ng-template *ngIf="isTemplate(helperText)" [ngTemplateOutlet]="helperText"></ng-template>
			</div>
			<div *ngIf="!warn && invalid" class="bx--form-requirement">
				<ng-container *ngIf="!isTemplate(invalidText)">{{invalidText}}</ng-container>
				<ng-template *ngIf="isTemplate(invalidText)" [ngTemplateOutlet]="invalidText"></ng-template>
			</div>
			<div *ngIf="!invalid && warn" class="bx--form-requirement">
				<ng-container *ngIf="!isTemplate(warnText)">{{warnText}}</ng-container>
				<ng-template *ngIf="isTemplate(warnText)" [ngTemplateOutlet]="warnText"></ng-template>
			</div>
		</div>
	`,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: NumberComponent,
                        multi: true
                    }
                ]
            }] }
];
/** @nocollapse */
NumberComponent.ctorParameters = () => [
    { type: I18n }
];
NumberComponent.propDecorators = {
    containerClass: [{ type: HostBinding, args: ["class.bx--form-item",] }],
    theme: [{ type: Input }],
    disabled: [{ type: Input }],
    skeleton: [{ type: Input }],
    invalid: [{ type: Input }],
    id: [{ type: Input }],
    size: [{ type: Input }],
    required: [{ type: Input }],
    value: [{ type: Input }],
    min: [{ type: Input }],
    max: [{ type: Input }],
    label: [{ type: Input }],
    helperText: [{ type: Input }],
    invalidText: [{ type: Input }],
    step: [{ type: Input }],
    precision: [{ type: Input }],
    warn: [{ type: Input }],
    warnText: [{ type: Input }],
    change: [{ type: Output }],
    decrementLabel: [{ type: Input }],
    incrementLabel: [{ type: Input }],
    focusOut: [{ type: HostListener, args: ["focusout",] }]
};
export { NumberComponent as Number };
//# sourceMappingURL=data:application/json;base64,
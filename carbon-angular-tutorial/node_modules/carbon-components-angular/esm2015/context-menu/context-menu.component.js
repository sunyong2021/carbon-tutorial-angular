/**
 *
 * carbon-angular v0.0.0 | context-menu.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, ElementRef, HostListener, Input } from "@angular/core";
export class ContextMenuComponent {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.root = true;
        this.open = false;
        this.position = {
            left: 0,
            top: 0
        };
    }
    ngOnChanges(changes) {
        if (changes.open && changes.open.currentValue) {
            this.focusMenu();
        }
    }
    focusMenu() {
        // wait until the next tick to let the DOM settle before changing the focus
        const list = this.elementRef.nativeElement.querySelector("ul");
        setTimeout(() => {
            if (this.root) {
                list.focus();
            }
            else {
                const firstOption = list.querySelector(".bx--context-menu-option");
                firstOption.focus();
            }
        });
    }
    handleNavigation(event) {
        const list = this.elementRef.nativeElement.querySelector("ul");
        const subMenus = Array.from(list.querySelectorAll("ul[role=menu]"));
        const menuItems = Array.from(list.querySelectorAll(".bx--context-menu-option")).filter(menuItem => {
            return !subMenus.some(subMenu => subMenu.contains(menuItem));
        });
        const currentIndex = menuItems.findIndex(menuItem => parseInt(menuItem.getAttribute("tabindex"), 10) === 0);
        const currentMenuItem = menuItems[currentIndex];
        switch (event.key) {
            case "ArrowDown": {
                if (document.activeElement === list) {
                    menuItems[0].focus();
                }
                else {
                    if (currentIndex !== -1 && currentIndex < menuItems.length - 1) {
                        menuItems[currentIndex + 1].focus();
                    }
                }
                break;
            }
            case "ArrowUp": {
                if (document.activeElement === list) {
                    menuItems[menuItems.length - 1].focus();
                }
                else {
                    if (currentIndex !== -1 && currentIndex > 0) {
                        menuItems[currentIndex - 1].focus();
                    }
                }
                break;
            }
            case "ArrowRight": {
                if (currentIndex !== -1 && subMenus.some(subMenu => currentMenuItem.contains(subMenu))) {
                    currentMenuItem.click();
                }
                break;
            }
            case "ArrowLeft": {
                const parent = currentMenuItem.parentElement.closest(".bx--context-menu-option");
                if (parent) {
                    parent.focus();
                }
                break;
            }
        }
    }
    getDimensions() {
        const element = this.elementRef.nativeElement.querySelector("ul");
        return element.getBoundingClientRect();
    }
}
ContextMenuComponent.decorators = [
    { type: Component, args: [{
                selector: "ibm-context-menu",
                template: `
		<ul
			class="bx--context-menu"
			[ngClass]="{
				'bx--context-menu--root': root,
				'bx--context-menu--open': open
			}"
			role="menu"
			tabindex="-1"
			[ngStyle]="{
				'left.px': position.left,
				'top.px': position.top
			}">
			<ng-content></ng-content>
		</ul>
	`
            }] }
];
/** @nocollapse */
ContextMenuComponent.ctorParameters = () => [
    { type: ElementRef }
];
ContextMenuComponent.propDecorators = {
    root: [{ type: Input }],
    open: [{ type: Input }],
    position: [{ type: Input }],
    handleNavigation: [{ type: HostListener, args: ["keydown", ["$event"],] }]
};
//# sourceMappingURL=data:application/json;base64,
/**
 *
 * carbon-angular v0.0.0 | context-menu-selection.service.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Injectable } from "@angular/core";
import { ReplaySubject } from "rxjs";
export class ContextMenuSelectionService {
    constructor() {
        this.selectionSubject = new ReplaySubject(1);
        this.value = [];
        this.selectionObservable = this.selectionSubject.asObservable();
    }
    selectRadio(value) {
        if (!value) {
            return;
        }
        this.selectionSubject.next(value);
        this.value = [value];
    }
    selectCheckbox(value) {
        if (!value) {
            return;
        }
        if (this.value.includes(value)) {
            this.value = this.value.filter(v => v !== value);
        }
        else {
            this.value.push(value);
        }
        this.selectionSubject.next(this.value);
    }
    selectCheckboxes(value) {
        if (!value) {
            return;
        }
        this.value = value;
        this.selectionSubject.next(value);
    }
}
ContextMenuSelectionService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ContextMenuSelectionService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGV4dC1tZW51LXNlbGVjdGlvbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vY2FyYm9uLWNvbXBvbmVudHMtYW5ndWxhci9jb250ZXh0LW1lbnUvIiwic291cmNlcyI6WyJjb250ZXh0LW1lbnUtc2VsZWN0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQWMsYUFBYSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBR2pELE1BQU0sT0FBTywyQkFBMkI7SUFLdkM7UUFIUSxxQkFBZ0IsR0FBRyxJQUFJLGFBQWEsQ0FBYyxDQUFDLENBQUMsQ0FBQztRQUNyRCxVQUFLLEdBQVUsRUFBRSxDQUFDO1FBR3pCLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDakUsQ0FBQztJQUVELFdBQVcsQ0FBQyxLQUFVO1FBQ3JCLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDWCxPQUFPO1NBQ1A7UUFDRCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2xDLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixDQUFDO0lBRUQsY0FBYyxDQUFDLEtBQVU7UUFDeEIsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNYLE9BQU87U0FDUDtRQUNELElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDL0IsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxLQUFLLENBQUMsQ0FBQztTQUNqRDthQUFNO1lBQ04sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDdkI7UUFDRCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBRUQsZ0JBQWdCLENBQUMsS0FBWTtRQUM1QixJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ1gsT0FBTztTQUNQO1FBQ0QsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNuQyxDQUFDOzs7WUFwQ0QsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgUmVwbGF5U3ViamVjdCB9IGZyb20gXCJyeGpzXCI7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDb250ZXh0TWVudVNlbGVjdGlvblNlcnZpY2Uge1xuXHRwdWJsaWMgc2VsZWN0aW9uT2JzZXJ2YWJsZTogT2JzZXJ2YWJsZTxhbnkgfCBhbnlbXT47XG5cdHByaXZhdGUgc2VsZWN0aW9uU3ViamVjdCA9IG5ldyBSZXBsYXlTdWJqZWN0PGFueSB8IGFueVtdPigxKTtcblx0cHJpdmF0ZSB2YWx1ZTogYW55W10gPSBbXTtcblxuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHR0aGlzLnNlbGVjdGlvbk9ic2VydmFibGUgPSB0aGlzLnNlbGVjdGlvblN1YmplY3QuYXNPYnNlcnZhYmxlKCk7XG5cdH1cblxuXHRzZWxlY3RSYWRpbyh2YWx1ZTogYW55KSB7XG5cdFx0aWYgKCF2YWx1ZSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHR0aGlzLnNlbGVjdGlvblN1YmplY3QubmV4dCh2YWx1ZSk7XG5cdFx0dGhpcy52YWx1ZSA9IFt2YWx1ZV07XG5cdH1cblxuXHRzZWxlY3RDaGVja2JveCh2YWx1ZTogYW55KSB7XG5cdFx0aWYgKCF2YWx1ZSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRpZiAodGhpcy52YWx1ZS5pbmNsdWRlcyh2YWx1ZSkpIHtcblx0XHRcdHRoaXMudmFsdWUgPSB0aGlzLnZhbHVlLmZpbHRlcih2ID0+IHYgIT09IHZhbHVlKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy52YWx1ZS5wdXNoKHZhbHVlKTtcblx0XHR9XG5cdFx0dGhpcy5zZWxlY3Rpb25TdWJqZWN0Lm5leHQodGhpcy52YWx1ZSk7XG5cdH1cblxuXHRzZWxlY3RDaGVja2JveGVzKHZhbHVlOiBhbnlbXSkge1xuXHRcdGlmICghdmFsdWUpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0dGhpcy52YWx1ZSA9IHZhbHVlO1xuXHRcdHRoaXMuc2VsZWN0aW9uU3ViamVjdC5uZXh0KHZhbHVlKTtcblx0fVxufVxuIl19
/**
 *
 * carbon-angular v0.0.0 | context-menu-item.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, HostBinding, Input, Output, EventEmitter, ElementRef, HostListener, ContentChild, Optional } from "@angular/core";
import { Subscription } from "rxjs";
import { ContextMenuSelectionService } from "./context-menu-selection.service";
import { ContextMenuComponent } from "./context-menu.component";
export class ContextMenuItemComponent {
    constructor(elementRef, contextMenuSelectionService) {
        this.elementRef = elementRef;
        this.contextMenuSelectionService = contextMenuSelectionService;
        this.optionClass = true;
        this.role = "menuitem";
        this.tabindex = -1;
        this.ariaHasPopup = null;
        this.ariaExpanded = null;
        this.label = "";
        this.info = "";
        this.type = null;
        this.checked = false;
        this.icon = "";
        this.value = "";
        this.checkedChange = new EventEmitter();
        this.hasChildren = false;
        this.selectable = false;
        this.subscriptions = new Subscription();
    }
    ngOnInit() {
        switch (this.type) {
            case "checkbox": {
                this.role = "menuitemcheckbox";
                this.selectable = true;
                break;
            }
            case "radio": {
                this.role = "menuitemradio";
                this.selectable = true;
                break;
            }
            default: {
                this.role = "menuitem";
            }
        }
        if (this.type && this.contextMenuSelectionService && this.value) {
            const { selectionObservable } = this.contextMenuSelectionService;
            const subscription = selectionObservable.subscribe((value) => {
                if (this.type === "radio") {
                    this.handleSelection(value === this.value);
                }
                if (this.type === "checkbox") {
                    this.handleSelection(value.includes(this.value));
                }
            });
            this.subscriptions.add(subscription);
        }
    }
    ngAfterContentInit() {
        if (this.childContextMenu) {
            this.hasChildren = true;
            this.ariaHasPopup = true;
            this.ariaExpanded = false;
            this.childContextMenu.root = false;
        }
    }
    handleClick(event) {
        event.stopPropagation();
        if (this.hasChildren) {
            this.openSubMenu();
            this.childContextMenu.focusMenu();
        }
        if (this.type) {
            this.handleSelection(!this.checked);
        }
        if (this.contextMenuSelectionService) {
            if (this.type === "radio") {
                this.contextMenuSelectionService.selectRadio(this.value);
            }
            if (this.type === "checkbox") {
                this.contextMenuSelectionService.selectCheckbox(this.value);
            }
        }
    }
    handleSelection(selected) {
        this.checked = selected;
        this.checkedChange.emit(this.checked);
    }
    openSubMenu() {
        if (this.childContextMenu) {
            this.childContextMenu.open = true;
            this.ariaExpanded = true;
            const dimensions = this.getDimensions();
            this.childContextMenu.position.left = dimensions.left + dimensions.width;
            // subtract 4px to account for margins
            this.childContextMenu.position.top = dimensions.top - 4;
        }
    }
    closeSubMenu() {
        if (this.childContextMenu) {
            this.childContextMenu.open = false;
            this.ariaExpanded = false;
        }
    }
    handleMouseOver() {
        this.openSubMenu();
    }
    handleMouseOut() {
        this.closeSubMenu();
    }
    handleFocus() {
        this.tabindex = 0;
        if (this.hasChildren && this.ariaExpanded) {
            this.closeSubMenu();
        }
    }
    handleBlur() {
        this.tabindex = -1;
    }
    focusItem() {
        this.elementRef.nativeElement.focus();
    }
    getDimensions() {
        const element = this.elementRef.nativeElement.querySelector(".bx--context-menu-option__content");
        return element.getBoundingClientRect();
    }
    ngOnDestroy() {
        this.subscriptions.unsubscribe();
    }
}
ContextMenuItemComponent.decorators = [
    { type: Component, args: [{
                selector: "ibm-context-menu-item",
                template: `
		<div class="bx--context-menu-option__content">
			<div class="bx--context-menu-option__icon">
				<svg *ngIf="selectable && checked" ibmIcon="checkmark" size="16"></svg>
				<svg *ngIf="!selectable && icon" [ibmIcon]="icon" size="16"></svg>
			</div>
			<span class="bx--context-menu-option__label" [title]="label">{{label}}</span>
			<div class="bx--context-menu-option__info">
				{{info}}
				<svg *ngIf="hasChildren" ibmIcon="caret--right" size="16"></svg>
			</div>
		</div>
		<ng-content></ng-content>
	`,
                styles: [`
		:host {
			display: list-item;
			list-style: none;
		}
	`]
            }] }
];
/** @nocollapse */
ContextMenuItemComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ContextMenuSelectionService, decorators: [{ type: Optional }] }
];
ContextMenuItemComponent.propDecorators = {
    optionClass: [{ type: HostBinding, args: ["class.bx--context-menu-option",] }],
    role: [{ type: HostBinding, args: ["attr.role",] }],
    tabindex: [{ type: HostBinding, args: ["attr.tabindex",] }],
    ariaHasPopup: [{ type: HostBinding, args: ["attr.aria-haspopup",] }],
    ariaExpanded: [{ type: HostBinding, args: ["attr.aria-expanded",] }],
    label: [{ type: Input }],
    info: [{ type: Input }],
    type: [{ type: Input }],
    checked: [{ type: Input }],
    icon: [{ type: Input }],
    value: [{ type: Input }],
    checkedChange: [{ type: Output }],
    childContextMenu: [{ type: ContentChild, args: [ContextMenuComponent, { static: true },] }],
    handleClick: [{ type: HostListener, args: ["keydown.enter", ["$event"],] }, { type: HostListener, args: ["keydown.space", ["$event"],] }, { type: HostListener, args: ["click", ["$event"],] }],
    handleMouseOver: [{ type: HostListener, args: ["mouseover",] }],
    handleMouseOut: [{ type: HostListener, args: ["mouseout",] }],
    handleFocus: [{ type: HostListener, args: ["focus",] }],
    handleBlur: [{ type: HostListener, args: ["blur",] }]
};
//# sourceMappingURL=data:application/json;base64,
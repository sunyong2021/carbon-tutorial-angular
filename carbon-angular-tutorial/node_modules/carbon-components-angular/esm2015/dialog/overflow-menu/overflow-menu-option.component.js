/**
 *
 * carbon-angular v0.0.0 | overflow-menu-option.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { HostBinding, Component, Input, ElementRef, Output, EventEmitter } from "@angular/core";
/**
 * Available HTML anchor targets
 */
export var Target;
(function (Target) {
    Target["self"] = "_self";
    Target["blank"] = "_blank";
    Target["parent"] = "_parent";
    Target["top"] = "_top";
})(Target || (Target = {}));
/**
 * Security HTML anchor rel when target is set
 */
const REL = "noreferrer noopener";
/**
 * `OverflowMenuOption` represents a single option in an overflow menu
 *
 * Presently it has three possible states - normal, disabled, and danger:
 * ```
 * <ibm-overflow-menu-option>Simple option</ibm-overflow-menu-option>
 * <ibm-overflow-menu-option disabled="true">Disabled</ibm-overflow-menu-option>
 * <ibm-overflow-menu-option type="danger">Danger option</ibm-overflow-menu-option>
 * ```
 *
 * For content that expands beyond the overflow menu `OverflowMenuOption` automatically adds a title attribute.
 */
export class OverflowMenuOption {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.optionClass = true;
        this.role = "presentation";
        /**
         * Set to `true` to display a dividing line above this option
         */
        this.divider = false;
        /**
         * toggles between `normal` and `danger` states
         */
        this.type = "normal";
        /**
         * disable/enable interactions
         */
        this.disabled = false;
        /**
         * Apply a custom class to the inner button/anchor
         */
        this.innerClass = "";
        this.selected = new EventEmitter();
        this.tabIndex = -1;
        // note: title must be a real attribute (i.e. not a getter) as of Angular@6 due to
        // change after checked errors
        this.title = null;
    }
    get isDanger() {
        return this.type === "danger";
    }
    get isDisabled() {
        return this.disabled;
    }
    /**
     * Allows to add a target to the anchor
     */
    set target(value) {
        if (!Object.values(Target).includes(value)) {
            console.warn(`\`target\` must have one of the following values: ${Object.values(Target).join(", ")}.
Please use the \`Target\` enum exported by carbon-components-angular`);
            return;
        }
        this._target = value;
    }
    get target() {
        return this._target;
    }
    /**
     * rel only returns its value if target is defined
     */
    get rel() {
        return this._target ? REL : null;
    }
    onClick() {
        this.selected.emit();
    }
    onFocus() {
        setTimeout(() => this.tabIndex = 0);
    }
    onBlur() {
        setTimeout(() => this.tabIndex = -1);
    }
    ngAfterViewInit() {
        const button = this.elementRef.nativeElement.querySelector("button, a");
        const textContainer = button.querySelector(".bx--overflow-menu-options__option-content");
        if (textContainer.scrollWidth > textContainer.offsetWidth) {
            this.title = button.textContent;
        }
    }
}
OverflowMenuOption.decorators = [
    { type: Component, args: [{
                selector: "ibm-overflow-menu-option",
                template: `
		<button
			*ngIf="!href"
			class="bx--overflow-menu-options__btn {{innerClass}}"
			role="menuitem"
			[tabindex]="tabIndex"
			(focus)="onFocus()"
			(blur)="onBlur()"
			(click)="onClick()"
			[disabled]="disabled"
			[attr.title]="title">
			<ng-container *ngTemplateOutlet="tempOutlet"></ng-container>
		</button>

		<a
			*ngIf="href"
			class="bx--overflow-menu-options__btn {{innerClass}}"
			role="menuitem"
			[tabindex]="tabIndex"
			(focus)="onFocus()"
			(blur)="onBlur()"
			(click)="onClick()"
			[attr.disabled]="disabled"
			[href]="href"
			[attr.target]="target"
			[attr.rel]="rel"
			[attr.title]="title">
			<ng-container *ngTemplateOutlet="tempOutlet"></ng-container>
		</a>

		<ng-template #tempOutlet>
			<div class="bx--overflow-menu-options__option-content">
				<ng-content></ng-content>
			</div>
		</ng-template>
	`
            }] }
];
/** @nocollapse */
OverflowMenuOption.ctorParameters = () => [
    { type: ElementRef }
];
OverflowMenuOption.propDecorators = {
    optionClass: [{ type: HostBinding, args: ["class.bx--overflow-menu-options__option",] }],
    role: [{ type: HostBinding, args: ["attr.role",] }],
    isDanger: [{ type: HostBinding, args: ["class.bx--overflow-menu-options__option--danger",] }],
    isDisabled: [{ type: HostBinding, args: ["class.bx--overflow-menu-options__option--disabled",] }],
    divider: [{ type: HostBinding, args: ["class.bx--overflow-menu--divider",] }, { type: Input }],
    type: [{ type: Input }],
    disabled: [{ type: Input }],
    href: [{ type: Input }],
    target: [{ type: Input }],
    innerClass: [{ type: Input }],
    selected: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3ZlcmZsb3ctbWVudS1vcHRpb24uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vY2FyYm9uLWNvbXBvbmVudHMtYW5ndWxhci9kaWFsb2cvIiwic291cmNlcyI6WyJvdmVyZmxvdy1tZW51L292ZXJmbG93LW1lbnUtb3B0aW9uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ04sV0FBVyxFQUNYLFNBQVMsRUFDVCxLQUFLLEVBQ0wsVUFBVSxFQUNWLE1BQU0sRUFDTixZQUFZLEVBRVosTUFBTSxlQUFlLENBQUM7QUFFdkI7O0dBRUc7QUFDSCxNQUFNLENBQU4sSUFBWSxNQUtYO0FBTEQsV0FBWSxNQUFNO0lBQ2pCLHdCQUFjLENBQUE7SUFDZCwwQkFBZ0IsQ0FBQTtJQUNoQiw0QkFBa0IsQ0FBQTtJQUNsQixzQkFBWSxDQUFBO0FBQ2IsQ0FBQyxFQUxXLE1BQU0sS0FBTixNQUFNLFFBS2pCO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLEdBQUcsR0FBRyxxQkFBcUIsQ0FBQztBQUVsQzs7Ozs7Ozs7Ozs7R0FXRztBQXdDSCxNQUFNLE9BQU8sa0JBQWtCO0lBa0U5QixZQUFzQixVQUFzQjtRQUF0QixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBakVZLGdCQUFXLEdBQUcsSUFBSSxDQUFDO1FBQ2pELFNBQUksR0FBRyxjQUFjLENBQUM7UUFXaEQ7O1dBRUc7UUFDdUQsWUFBTyxHQUFHLEtBQUssQ0FBQztRQUMxRTs7V0FFRztRQUNNLFNBQUksR0FBd0IsUUFBUSxDQUFDO1FBQzlDOztXQUVHO1FBQ00sYUFBUSxHQUFHLEtBQUssQ0FBQztRQWtCMUI7O1dBRUc7UUFDTSxlQUFVLEdBQUcsRUFBRSxDQUFDO1FBWWYsYUFBUSxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBRXBELGFBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNyQixrRkFBa0Y7UUFDbEYsOEJBQThCO1FBQ3ZCLFVBQUssR0FBRyxJQUFJLENBQUM7SUFJMkIsQ0FBQztJQTlEaEQsSUFDVyxRQUFRO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyxRQUFRLENBQUM7SUFDL0IsQ0FBQztJQUVELElBQ1csVUFBVTtRQUNwQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDdEIsQ0FBQztJQWlCRDs7T0FFRztJQUNILElBQWEsTUFBTSxDQUFDLEtBQWE7UUFDaEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQzNDLE9BQU8sQ0FBQyxJQUFJLENBQ2YscURBQXFELE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztxRUFDaEIsQ0FBQyxDQUFDO1lBQ3BFLE9BQU87U0FDUDtRQUVELElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO0lBQ3RCLENBQUM7SUFNRCxJQUFJLE1BQU07UUFDVCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDckIsQ0FBQztJQUNEOztPQUVHO0lBQ0gsSUFBSSxHQUFHO1FBQ04sT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUNsQyxDQUFDO0lBYUQsT0FBTztRQUNOLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUVELE9BQU87UUFDTixVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRUQsTUFBTTtRQUNMLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUVELGVBQWU7UUFDZCxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDeEUsTUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLGFBQWEsQ0FBQyw0Q0FBNEMsQ0FBQyxDQUFDO1FBQ3pGLElBQUksYUFBYSxDQUFDLFdBQVcsR0FBRyxhQUFhLENBQUMsV0FBVyxFQUFFO1lBQzFELElBQUksQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQztTQUNoQztJQUNGLENBQUM7OztZQTdIRCxTQUFTLFNBQUM7Z0JBQ1YsUUFBUSxFQUFFLDBCQUEwQjtnQkFDcEMsUUFBUSxFQUFFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztFQW1DVDthQUNEOzs7O1lBdkVBLFVBQVU7OzswQkF5RVQsV0FBVyxTQUFDLHlDQUF5QzttQkFDckQsV0FBVyxTQUFDLFdBQVc7dUJBRXZCLFdBQVcsU0FBQyxpREFBaUQ7eUJBSzdELFdBQVcsU0FBQyxtREFBbUQ7c0JBTy9ELFdBQVcsU0FBQyxrQ0FBa0MsY0FBRyxLQUFLO21CQUl0RCxLQUFLO3VCQUlMLEtBQUs7bUJBSUwsS0FBSztxQkFJTCxLQUFLO3lCQWFMLEtBQUs7dUJBWUwsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG5cdEhvc3RCaW5kaW5nLFxuXHRDb21wb25lbnQsXG5cdElucHV0LFxuXHRFbGVtZW50UmVmLFxuXHRPdXRwdXQsXG5cdEV2ZW50RW1pdHRlcixcblx0QWZ0ZXJWaWV3SW5pdFxufSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuXG4vKipcbiAqIEF2YWlsYWJsZSBIVE1MIGFuY2hvciB0YXJnZXRzXG4gKi9cbmV4cG9ydCBlbnVtIFRhcmdldCB7XG5cdHNlbGYgPSBcIl9zZWxmXCIsXG5cdGJsYW5rID0gXCJfYmxhbmtcIixcblx0cGFyZW50ID0gXCJfcGFyZW50XCIsXG5cdHRvcCA9IFwiX3RvcFwiXG59XG5cbi8qKlxuICogU2VjdXJpdHkgSFRNTCBhbmNob3IgcmVsIHdoZW4gdGFyZ2V0IGlzIHNldFxuICovXG5jb25zdCBSRUwgPSBcIm5vcmVmZXJyZXIgbm9vcGVuZXJcIjtcblxuLyoqXG4gKiBgT3ZlcmZsb3dNZW51T3B0aW9uYCByZXByZXNlbnRzIGEgc2luZ2xlIG9wdGlvbiBpbiBhbiBvdmVyZmxvdyBtZW51XG4gKlxuICogUHJlc2VudGx5IGl0IGhhcyB0aHJlZSBwb3NzaWJsZSBzdGF0ZXMgLSBub3JtYWwsIGRpc2FibGVkLCBhbmQgZGFuZ2VyOlxuICogYGBgXG4gKiA8aWJtLW92ZXJmbG93LW1lbnUtb3B0aW9uPlNpbXBsZSBvcHRpb248L2libS1vdmVyZmxvdy1tZW51LW9wdGlvbj5cbiAqIDxpYm0tb3ZlcmZsb3ctbWVudS1vcHRpb24gZGlzYWJsZWQ9XCJ0cnVlXCI+RGlzYWJsZWQ8L2libS1vdmVyZmxvdy1tZW51LW9wdGlvbj5cbiAqIDxpYm0tb3ZlcmZsb3ctbWVudS1vcHRpb24gdHlwZT1cImRhbmdlclwiPkRhbmdlciBvcHRpb248L2libS1vdmVyZmxvdy1tZW51LW9wdGlvbj5cbiAqIGBgYFxuICpcbiAqIEZvciBjb250ZW50IHRoYXQgZXhwYW5kcyBiZXlvbmQgdGhlIG92ZXJmbG93IG1lbnUgYE92ZXJmbG93TWVudU9wdGlvbmAgYXV0b21hdGljYWxseSBhZGRzIGEgdGl0bGUgYXR0cmlidXRlLlxuICovXG5AQ29tcG9uZW50KHtcblx0c2VsZWN0b3I6IFwiaWJtLW92ZXJmbG93LW1lbnUtb3B0aW9uXCIsXG5cdHRlbXBsYXRlOiBgXG5cdFx0PGJ1dHRvblxuXHRcdFx0Km5nSWY9XCIhaHJlZlwiXG5cdFx0XHRjbGFzcz1cImJ4LS1vdmVyZmxvdy1tZW51LW9wdGlvbnNfX2J0biB7e2lubmVyQ2xhc3N9fVwiXG5cdFx0XHRyb2xlPVwibWVudWl0ZW1cIlxuXHRcdFx0W3RhYmluZGV4XT1cInRhYkluZGV4XCJcblx0XHRcdChmb2N1cyk9XCJvbkZvY3VzKClcIlxuXHRcdFx0KGJsdXIpPVwib25CbHVyKClcIlxuXHRcdFx0KGNsaWNrKT1cIm9uQ2xpY2soKVwiXG5cdFx0XHRbZGlzYWJsZWRdPVwiZGlzYWJsZWRcIlxuXHRcdFx0W2F0dHIudGl0bGVdPVwidGl0bGVcIj5cblx0XHRcdDxuZy1jb250YWluZXIgKm5nVGVtcGxhdGVPdXRsZXQ9XCJ0ZW1wT3V0bGV0XCI+PC9uZy1jb250YWluZXI+XG5cdFx0PC9idXR0b24+XG5cblx0XHQ8YVxuXHRcdFx0Km5nSWY9XCJocmVmXCJcblx0XHRcdGNsYXNzPVwiYngtLW92ZXJmbG93LW1lbnUtb3B0aW9uc19fYnRuIHt7aW5uZXJDbGFzc319XCJcblx0XHRcdHJvbGU9XCJtZW51aXRlbVwiXG5cdFx0XHRbdGFiaW5kZXhdPVwidGFiSW5kZXhcIlxuXHRcdFx0KGZvY3VzKT1cIm9uRm9jdXMoKVwiXG5cdFx0XHQoYmx1cik9XCJvbkJsdXIoKVwiXG5cdFx0XHQoY2xpY2spPVwib25DbGljaygpXCJcblx0XHRcdFthdHRyLmRpc2FibGVkXT1cImRpc2FibGVkXCJcblx0XHRcdFtocmVmXT1cImhyZWZcIlxuXHRcdFx0W2F0dHIudGFyZ2V0XT1cInRhcmdldFwiXG5cdFx0XHRbYXR0ci5yZWxdPVwicmVsXCJcblx0XHRcdFthdHRyLnRpdGxlXT1cInRpdGxlXCI+XG5cdFx0XHQ8bmctY29udGFpbmVyICpuZ1RlbXBsYXRlT3V0bGV0PVwidGVtcE91dGxldFwiPjwvbmctY29udGFpbmVyPlxuXHRcdDwvYT5cblxuXHRcdDxuZy10ZW1wbGF0ZSAjdGVtcE91dGxldD5cblx0XHRcdDxkaXYgY2xhc3M9XCJieC0tb3ZlcmZsb3ctbWVudS1vcHRpb25zX19vcHRpb24tY29udGVudFwiPlxuXHRcdFx0XHQ8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG5cdFx0XHQ8L2Rpdj5cblx0XHQ8L25nLXRlbXBsYXRlPlxuXHRgXG59KVxuZXhwb3J0IGNsYXNzIE92ZXJmbG93TWVudU9wdGlvbiBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5ieC0tb3ZlcmZsb3ctbWVudS1vcHRpb25zX19vcHRpb25cIikgb3B0aW9uQ2xhc3MgPSB0cnVlO1xuXHRASG9zdEJpbmRpbmcoXCJhdHRyLnJvbGVcIikgcm9sZSA9IFwicHJlc2VudGF0aW9uXCI7XG5cblx0QEhvc3RCaW5kaW5nKFwiY2xhc3MuYngtLW92ZXJmbG93LW1lbnUtb3B0aW9uc19fb3B0aW9uLS1kYW5nZXJcIilcblx0cHVibGljIGdldCBpc0RhbmdlcigpOiBCb29sZWFuIHtcblx0XHRyZXR1cm4gdGhpcy50eXBlID09PSBcImRhbmdlclwiO1xuXHR9XG5cblx0QEhvc3RCaW5kaW5nKFwiY2xhc3MuYngtLW92ZXJmbG93LW1lbnUtb3B0aW9uc19fb3B0aW9uLS1kaXNhYmxlZFwiKVxuXHRwdWJsaWMgZ2V0IGlzRGlzYWJsZWQoKTogQm9vbGVhbiB7XG5cdFx0cmV0dXJuIHRoaXMuZGlzYWJsZWQ7XG5cdH1cblx0LyoqXG5cdCAqIFNldCB0byBgdHJ1ZWAgdG8gZGlzcGxheSBhIGRpdmlkaW5nIGxpbmUgYWJvdmUgdGhpcyBvcHRpb25cblx0ICovXG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmJ4LS1vdmVyZmxvdy1tZW51LS1kaXZpZGVyXCIpIEBJbnB1dCgpIGRpdmlkZXIgPSBmYWxzZTtcblx0LyoqXG5cdCAqIHRvZ2dsZXMgYmV0d2VlbiBgbm9ybWFsYCBhbmQgYGRhbmdlcmAgc3RhdGVzXG5cdCAqL1xuXHRASW5wdXQoKSB0eXBlOiBcIm5vcm1hbFwiIHwgXCJkYW5nZXJcIiA9IFwibm9ybWFsXCI7XG5cdC8qKlxuXHQgKiBkaXNhYmxlL2VuYWJsZSBpbnRlcmFjdGlvbnNcblx0ICovXG5cdEBJbnB1dCgpIGRpc2FibGVkID0gZmFsc2U7XG5cdC8qKlxuXHQgKiBJZiBpdCdzIGFuIGFuY2hvciwgdGhpcyBpcyBpdHMgbG9jYXRpb25cblx0ICovXG5cdEBJbnB1dCgpIGhyZWY6IHN0cmluZztcblx0LyoqXG5cdCAqIEFsbG93cyB0byBhZGQgYSB0YXJnZXQgdG8gdGhlIGFuY2hvclxuXHQgKi9cblx0QElucHV0KCkgc2V0IHRhcmdldCh2YWx1ZTogVGFyZ2V0KSB7XG5cdFx0aWYgKCFPYmplY3QudmFsdWVzKFRhcmdldCkuaW5jbHVkZXModmFsdWUpKSB7XG5cdFx0XHRjb25zb2xlLndhcm4oXG5gXFxgdGFyZ2V0XFxgIG11c3QgaGF2ZSBvbmUgb2YgdGhlIGZvbGxvd2luZyB2YWx1ZXM6ICR7T2JqZWN0LnZhbHVlcyhUYXJnZXQpLmpvaW4oXCIsIFwiKX0uXG5QbGVhc2UgdXNlIHRoZSBcXGBUYXJnZXRcXGAgZW51bSBleHBvcnRlZCBieSBjYXJib24tY29tcG9uZW50cy1hbmd1bGFyYCk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dGhpcy5fdGFyZ2V0ID0gdmFsdWU7XG5cdH1cblx0LyoqXG5cdCAqIEFwcGx5IGEgY3VzdG9tIGNsYXNzIHRvIHRoZSBpbm5lciBidXR0b24vYW5jaG9yXG5cdCAqL1xuXHRASW5wdXQoKSBpbm5lckNsYXNzID0gXCJcIjtcblxuXHRnZXQgdGFyZ2V0KCkge1xuXHRcdHJldHVybiB0aGlzLl90YXJnZXQ7XG5cdH1cblx0LyoqXG5cdCAqIHJlbCBvbmx5IHJldHVybnMgaXRzIHZhbHVlIGlmIHRhcmdldCBpcyBkZWZpbmVkXG5cdCAqL1xuXHRnZXQgcmVsKCkge1xuXHRcdHJldHVybiB0aGlzLl90YXJnZXQgPyBSRUwgOiBudWxsO1xuXHR9XG5cblx0QE91dHB1dCgpIHNlbGVjdGVkOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuXHRwdWJsaWMgdGFiSW5kZXggPSAtMTtcblx0Ly8gbm90ZTogdGl0bGUgbXVzdCBiZSBhIHJlYWwgYXR0cmlidXRlIChpLmUuIG5vdCBhIGdldHRlcikgYXMgb2YgQW5ndWxhckA2IGR1ZSB0b1xuXHQvLyBjaGFuZ2UgYWZ0ZXIgY2hlY2tlZCBlcnJvcnNcblx0cHVibGljIHRpdGxlID0gbnVsbDtcblxuXHRwcm90ZWN0ZWQgX3RhcmdldDogVGFyZ2V0O1xuXG5cdGNvbnN0cnVjdG9yKHByb3RlY3RlZCBlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7fVxuXG5cdG9uQ2xpY2soKSB7XG5cdFx0dGhpcy5zZWxlY3RlZC5lbWl0KCk7XG5cdH1cblxuXHRvbkZvY3VzKCkge1xuXHRcdHNldFRpbWVvdXQoKCkgPT4gdGhpcy50YWJJbmRleCA9IDApO1xuXHR9XG5cblx0b25CbHVyKCkge1xuXHRcdHNldFRpbWVvdXQoKCkgPT4gdGhpcy50YWJJbmRleCA9IC0xKTtcblx0fVxuXG5cdG5nQWZ0ZXJWaWV3SW5pdCgpIHtcblx0XHRjb25zdCBidXR0b24gPSB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiYnV0dG9uLCBhXCIpO1xuXHRcdGNvbnN0IHRleHRDb250YWluZXIgPSBidXR0b24ucXVlcnlTZWxlY3RvcihcIi5ieC0tb3ZlcmZsb3ctbWVudS1vcHRpb25zX19vcHRpb24tY29udGVudFwiKTtcblx0XHRpZiAodGV4dENvbnRhaW5lci5zY3JvbGxXaWR0aCA+IHRleHRDb250YWluZXIub2Zmc2V0V2lkdGgpIHtcblx0XHRcdHRoaXMudGl0bGUgPSBidXR0b24udGV4dENvbnRlbnQ7XG5cdFx0fVxuXHR9XG59XG4iXX0=
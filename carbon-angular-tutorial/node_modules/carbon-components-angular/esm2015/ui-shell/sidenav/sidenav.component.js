/**
 *
 * carbon-angular v0.0.0 | sidenav.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, HostBinding, Input, ViewEncapsulation } from "@angular/core";
import { I18n } from "carbon-components-angular/i18n";
/**
 * `Sidenav` is a fixed left navigation that may contain `SideNavItem`s or `SideNavMenu`s
 *
 * [See demo](../../?path=/story/ui-shell--side-navigation)
 *
 * <example-url>../../iframe.html?id=ui-shell--side-navigation</example-url>
 */
export class SideNav {
    constructor(i18n) {
        this.i18n = i18n;
        this.role = "complementary";
        this.hostClass = true;
        this.ariaLabel = "Side navigation";
        /**
         * Controls the expanded (`true`) or collapsed (`false`) state when on a small screen.
         */
        this.expanded = true;
        /**
         * Controls the hidden (`true`) or visible (`false`) state
         */
        this.hidden = false;
        this.rail = false;
        this.ux = true;
        this.allowExpansion = false;
    }
    toggle() {
        this.expanded = !this.expanded;
    }
}
SideNav.decorators = [
    { type: Component, args: [{
                selector: "ibm-sidenav",
                template: `
		<nav class="bx--side-nav__navigation" role="navigation" [attr.aria-label]="ariaLabel">
			<ng-content select="ibm-sidenav-header"></ng-content>
			<ul class="bx--side-nav__items">
				<div
					class="bx--side-nav__header-navigation bx--side-nav__header-divider">
					<ng-container *ngFor="let navigationItem of navigationItems">
						<ibm-sidenav-item
							*ngIf="navigationItem.type === 'item'"
							[href]="navigationItem.href"
							[route]="navigationItem.route"
							[routeExtras]="navigationItem.routeExtras"
							[title]="navigationItem.title">
							{{ navigationItem.content }}
						</ibm-sidenav-item>
						<ibm-sidenav-menu
							*ngIf="navigationItem.type === 'menu'"
							[title]="navigationItem.title"
							[menuItems]="navigationItem.menuItems">
						</ibm-sidenav-menu>
					</ng-container>
				</div>
				<ng-content></ng-content>
			</ul>
			<footer class="bx--side-nav__footer">
				<button
					*ngIf="allowExpansion"
					class="bx--side-nav__toggle"
					type="button"
					[title]="(expanded ? i18n.get('UI_SHELL.SIDE_NAV.TOGGLE_CLOSE') : i18n.get('UI_SHELL.SIDE_NAV.TOGGLE_OPEN')) | async"
					(click)="toggle()">
					<div class="bx--side-nav__icon">
						<svg
							*ngIf="expanded"
							focusable="false"
							preserveAspectRatio="xMidYMid meet"
							style="will-change: transform;"
							xmlns="http://www.w3.org/2000/svg"
							width="20"
							height="20"
							viewBox="0 0 32 32"
							aria-hidden="true">
							<path d="M24 9.4L22.6 8 16 14.6 9.4 8 8 9.4l6.6 6.6L8 22.6 9.4 24l6.6-6.6 6.6 6.6 1.4-1.4-6.6-6.6L24 9.4z"></path>
						</svg>
						<svg
							*ngIf="!expanded"
							focusable="false"
							preserveAspectRatio="xMidYMid meet"
							style="will-change: transform;"
							xmlns="http://www.w3.org/2000/svg"
							width="20"
							height="20"
							viewBox="0 0 32 32"
							aria-hidden="true">
							<path d="M22 16L12 26l-1.4-1.4 8.6-8.6-8.6-8.6L12 6z"></path>
						</svg>
					</div>
					<span class="bx--assistive-text">
						{{(expanded ? i18n.get('UI_SHELL.SIDE_NAV.TOGGLE_CLOSE') : i18n.get('UI_SHELL.SIDE_NAV.TOGGLE_OPEN')) | async}}
					</span>
				</button>
			</footer>
		</nav>
	`,
                encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
SideNav.ctorParameters = () => [
    { type: I18n }
];
SideNav.propDecorators = {
    role: [{ type: HostBinding, args: ["attr.role",] }],
    hostClass: [{ type: HostBinding, args: ["class.bx--side-nav",] }],
    ariaLabel: [{ type: HostBinding, args: ["attr.aria-label",] }, { type: Input }],
    expanded: [{ type: HostBinding, args: ["class.bx--side-nav--expanded",] }, { type: Input }],
    hidden: [{ type: HostBinding, args: ["class.bx--side-nav--hidden",] }, { type: Input }],
    rail: [{ type: HostBinding, args: ["class.bx--side-nav--rail",] }, { type: Input }],
    ux: [{ type: HostBinding, args: ["class.bx--side-nav--ux",] }],
    allowExpansion: [{ type: Input }],
    navigationItems: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lkZW5hdi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9jYXJib24tY29tcG9uZW50cy1hbmd1bGFyL3VpLXNoZWxsLyIsInNvdXJjZXMiOlsic2lkZW5hdi9zaWRlbmF2LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ04sU0FBUyxFQUNULFdBQVcsRUFDWCxLQUFLLEVBQ0wsaUJBQWlCLEVBQ2pCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUd0RDs7Ozs7O0dBTUc7QUFxRUgsTUFBTSxPQUFPLE9BQU87SUF1Qm5CLFlBQW1CLElBQVU7UUFBVixTQUFJLEdBQUosSUFBSSxDQUFNO1FBdEJILFNBQUksR0FBRyxlQUFlLENBQUM7UUFDZCxjQUFTLEdBQUcsSUFBSSxDQUFDO1FBQ1gsY0FBUyxHQUFHLGlCQUFpQixDQUFDO1FBQ3ZFOztXQUVHO1FBQ21ELGFBQVEsR0FBRyxJQUFJLENBQUM7UUFDdEU7O1dBRUc7UUFDaUQsV0FBTSxHQUFHLEtBQUssQ0FBQztRQUNqQixTQUFJLEdBQUcsS0FBSyxDQUFDO1FBQ3hCLE9BQUUsR0FBRyxJQUFJLENBQUM7UUFDeEMsbUJBQWMsR0FBRyxLQUFLLENBQUM7SUFTQyxDQUFDO0lBRWxDLE1BQU07UUFDTCxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUNoQyxDQUFDOzs7WUEvRkQsU0FBUyxTQUFDO2dCQUNWLFFBQVEsRUFBRSxhQUFhO2dCQUN2QixRQUFRLEVBQUU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztFQStEVDtnQkFDRCxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTthQUNyQzs7OztZQTdFUSxJQUFJOzs7bUJBK0VYLFdBQVcsU0FBQyxXQUFXO3dCQUN2QixXQUFXLFNBQUMsb0JBQW9CO3dCQUNoQyxXQUFXLFNBQUMsaUJBQWlCLGNBQUcsS0FBSzt1QkFJckMsV0FBVyxTQUFDLDhCQUE4QixjQUFHLEtBQUs7cUJBSWxELFdBQVcsU0FBQyw0QkFBNEIsY0FBRyxLQUFLO21CQUNoRCxXQUFXLFNBQUMsMEJBQTBCLGNBQUcsS0FBSztpQkFDOUMsV0FBVyxTQUFDLHdCQUF3Qjs2QkFDcEMsS0FBSzs4QkFPTCxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcblx0Q29tcG9uZW50LFxuXHRIb3N0QmluZGluZyxcblx0SW5wdXQsXG5cdFZpZXdFbmNhcHN1bGF0aW9uXG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBJMThuIH0gZnJvbSBcImNhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXIvaTE4blwiO1xuaW1wb3J0IHsgTmF2aWdhdGlvbkl0ZW0gfSBmcm9tIFwiLi4vaGVhZGVyL2hlYWRlci1uYXZpZ2F0aW9uLWl0ZW1zLmludGVyZmFjZVwiO1xuXG4vKipcbiAqIGBTaWRlbmF2YCBpcyBhIGZpeGVkIGxlZnQgbmF2aWdhdGlvbiB0aGF0IG1heSBjb250YWluIGBTaWRlTmF2SXRlbWBzIG9yIGBTaWRlTmF2TWVudWBzXG4gKlxuICogW1NlZSBkZW1vXSguLi8uLi8/cGF0aD0vc3RvcnkvdWktc2hlbGwtLXNpZGUtbmF2aWdhdGlvbilcbiAqXG4gKiA8ZXhhbXBsZS11cmw+Li4vLi4vaWZyYW1lLmh0bWw/aWQ9dWktc2hlbGwtLXNpZGUtbmF2aWdhdGlvbjwvZXhhbXBsZS11cmw+XG4gKi9cbkBDb21wb25lbnQoe1xuXHRzZWxlY3RvcjogXCJpYm0tc2lkZW5hdlwiLFxuXHR0ZW1wbGF0ZTogYFxuXHRcdDxuYXYgY2xhc3M9XCJieC0tc2lkZS1uYXZfX25hdmlnYXRpb25cIiByb2xlPVwibmF2aWdhdGlvblwiIFthdHRyLmFyaWEtbGFiZWxdPVwiYXJpYUxhYmVsXCI+XG5cdFx0XHQ8bmctY29udGVudCBzZWxlY3Q9XCJpYm0tc2lkZW5hdi1oZWFkZXJcIj48L25nLWNvbnRlbnQ+XG5cdFx0XHQ8dWwgY2xhc3M9XCJieC0tc2lkZS1uYXZfX2l0ZW1zXCI+XG5cdFx0XHRcdDxkaXZcblx0XHRcdFx0XHRjbGFzcz1cImJ4LS1zaWRlLW5hdl9faGVhZGVyLW5hdmlnYXRpb24gYngtLXNpZGUtbmF2X19oZWFkZXItZGl2aWRlclwiPlxuXHRcdFx0XHRcdDxuZy1jb250YWluZXIgKm5nRm9yPVwibGV0IG5hdmlnYXRpb25JdGVtIG9mIG5hdmlnYXRpb25JdGVtc1wiPlxuXHRcdFx0XHRcdFx0PGlibS1zaWRlbmF2LWl0ZW1cblx0XHRcdFx0XHRcdFx0Km5nSWY9XCJuYXZpZ2F0aW9uSXRlbS50eXBlID09PSAnaXRlbSdcIlxuXHRcdFx0XHRcdFx0XHRbaHJlZl09XCJuYXZpZ2F0aW9uSXRlbS5ocmVmXCJcblx0XHRcdFx0XHRcdFx0W3JvdXRlXT1cIm5hdmlnYXRpb25JdGVtLnJvdXRlXCJcblx0XHRcdFx0XHRcdFx0W3JvdXRlRXh0cmFzXT1cIm5hdmlnYXRpb25JdGVtLnJvdXRlRXh0cmFzXCJcblx0XHRcdFx0XHRcdFx0W3RpdGxlXT1cIm5hdmlnYXRpb25JdGVtLnRpdGxlXCI+XG5cdFx0XHRcdFx0XHRcdHt7IG5hdmlnYXRpb25JdGVtLmNvbnRlbnQgfX1cblx0XHRcdFx0XHRcdDwvaWJtLXNpZGVuYXYtaXRlbT5cblx0XHRcdFx0XHRcdDxpYm0tc2lkZW5hdi1tZW51XG5cdFx0XHRcdFx0XHRcdCpuZ0lmPVwibmF2aWdhdGlvbkl0ZW0udHlwZSA9PT0gJ21lbnUnXCJcblx0XHRcdFx0XHRcdFx0W3RpdGxlXT1cIm5hdmlnYXRpb25JdGVtLnRpdGxlXCJcblx0XHRcdFx0XHRcdFx0W21lbnVJdGVtc109XCJuYXZpZ2F0aW9uSXRlbS5tZW51SXRlbXNcIj5cblx0XHRcdFx0XHRcdDwvaWJtLXNpZGVuYXYtbWVudT5cblx0XHRcdFx0XHQ8L25nLWNvbnRhaW5lcj5cblx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdDxuZy1jb250ZW50PjwvbmctY29udGVudD5cblx0XHRcdDwvdWw+XG5cdFx0XHQ8Zm9vdGVyIGNsYXNzPVwiYngtLXNpZGUtbmF2X19mb290ZXJcIj5cblx0XHRcdFx0PGJ1dHRvblxuXHRcdFx0XHRcdCpuZ0lmPVwiYWxsb3dFeHBhbnNpb25cIlxuXHRcdFx0XHRcdGNsYXNzPVwiYngtLXNpZGUtbmF2X190b2dnbGVcIlxuXHRcdFx0XHRcdHR5cGU9XCJidXR0b25cIlxuXHRcdFx0XHRcdFt0aXRsZV09XCIoZXhwYW5kZWQgPyBpMThuLmdldCgnVUlfU0hFTEwuU0lERV9OQVYuVE9HR0xFX0NMT1NFJykgOiBpMThuLmdldCgnVUlfU0hFTEwuU0lERV9OQVYuVE9HR0xFX09QRU4nKSkgfCBhc3luY1wiXG5cdFx0XHRcdFx0KGNsaWNrKT1cInRvZ2dsZSgpXCI+XG5cdFx0XHRcdFx0PGRpdiBjbGFzcz1cImJ4LS1zaWRlLW5hdl9faWNvblwiPlxuXHRcdFx0XHRcdFx0PHN2Z1xuXHRcdFx0XHRcdFx0XHQqbmdJZj1cImV4cGFuZGVkXCJcblx0XHRcdFx0XHRcdFx0Zm9jdXNhYmxlPVwiZmFsc2VcIlxuXHRcdFx0XHRcdFx0XHRwcmVzZXJ2ZUFzcGVjdFJhdGlvPVwieE1pZFlNaWQgbWVldFwiXG5cdFx0XHRcdFx0XHRcdHN0eWxlPVwid2lsbC1jaGFuZ2U6IHRyYW5zZm9ybTtcIlxuXHRcdFx0XHRcdFx0XHR4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcblx0XHRcdFx0XHRcdFx0d2lkdGg9XCIyMFwiXG5cdFx0XHRcdFx0XHRcdGhlaWdodD1cIjIwXCJcblx0XHRcdFx0XHRcdFx0dmlld0JveD1cIjAgMCAzMiAzMlwiXG5cdFx0XHRcdFx0XHRcdGFyaWEtaGlkZGVuPVwidHJ1ZVwiPlxuXHRcdFx0XHRcdFx0XHQ8cGF0aCBkPVwiTTI0IDkuNEwyMi42IDggMTYgMTQuNiA5LjQgOCA4IDkuNGw2LjYgNi42TDggMjIuNiA5LjQgMjRsNi42LTYuNiA2LjYgNi42IDEuNC0xLjQtNi42LTYuNkwyNCA5LjR6XCI+PC9wYXRoPlxuXHRcdFx0XHRcdFx0PC9zdmc+XG5cdFx0XHRcdFx0XHQ8c3ZnXG5cdFx0XHRcdFx0XHRcdCpuZ0lmPVwiIWV4cGFuZGVkXCJcblx0XHRcdFx0XHRcdFx0Zm9jdXNhYmxlPVwiZmFsc2VcIlxuXHRcdFx0XHRcdFx0XHRwcmVzZXJ2ZUFzcGVjdFJhdGlvPVwieE1pZFlNaWQgbWVldFwiXG5cdFx0XHRcdFx0XHRcdHN0eWxlPVwid2lsbC1jaGFuZ2U6IHRyYW5zZm9ybTtcIlxuXHRcdFx0XHRcdFx0XHR4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcblx0XHRcdFx0XHRcdFx0d2lkdGg9XCIyMFwiXG5cdFx0XHRcdFx0XHRcdGhlaWdodD1cIjIwXCJcblx0XHRcdFx0XHRcdFx0dmlld0JveD1cIjAgMCAzMiAzMlwiXG5cdFx0XHRcdFx0XHRcdGFyaWEtaGlkZGVuPVwidHJ1ZVwiPlxuXHRcdFx0XHRcdFx0XHQ8cGF0aCBkPVwiTTIyIDE2TDEyIDI2bC0xLjQtMS40IDguNi04LjYtOC42LTguNkwxMiA2elwiPjwvcGF0aD5cblx0XHRcdFx0XHRcdDwvc3ZnPlxuXHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHRcdDxzcGFuIGNsYXNzPVwiYngtLWFzc2lzdGl2ZS10ZXh0XCI+XG5cdFx0XHRcdFx0XHR7eyhleHBhbmRlZCA/IGkxOG4uZ2V0KCdVSV9TSEVMTC5TSURFX05BVi5UT0dHTEVfQ0xPU0UnKSA6IGkxOG4uZ2V0KCdVSV9TSEVMTC5TSURFX05BVi5UT0dHTEVfT1BFTicpKSB8IGFzeW5jfX1cblx0XHRcdFx0XHQ8L3NwYW4+XG5cdFx0XHRcdDwvYnV0dG9uPlxuXHRcdFx0PC9mb290ZXI+XG5cdFx0PC9uYXY+XG5cdGAsXG5cdGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmVcbn0pXG5leHBvcnQgY2xhc3MgU2lkZU5hdiB7XG5cdEBIb3N0QmluZGluZyhcImF0dHIucm9sZVwiKSByb2xlID0gXCJjb21wbGVtZW50YXJ5XCI7XG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmJ4LS1zaWRlLW5hdlwiKSBob3N0Q2xhc3MgPSB0cnVlO1xuXHRASG9zdEJpbmRpbmcoXCJhdHRyLmFyaWEtbGFiZWxcIikgQElucHV0KCkgYXJpYUxhYmVsID0gXCJTaWRlIG5hdmlnYXRpb25cIjtcblx0LyoqXG5cdCAqIENvbnRyb2xzIHRoZSBleHBhbmRlZCAoYHRydWVgKSBvciBjb2xsYXBzZWQgKGBmYWxzZWApIHN0YXRlIHdoZW4gb24gYSBzbWFsbCBzY3JlZW4uXG5cdCAqL1xuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5ieC0tc2lkZS1uYXYtLWV4cGFuZGVkXCIpIEBJbnB1dCgpIGV4cGFuZGVkID0gdHJ1ZTtcblx0LyoqXG5cdCAqIENvbnRyb2xzIHRoZSBoaWRkZW4gKGB0cnVlYCkgb3IgdmlzaWJsZSAoYGZhbHNlYCkgc3RhdGVcblx0ICovXG5cdEBIb3N0QmluZGluZyhcImNsYXNzLmJ4LS1zaWRlLW5hdi0taGlkZGVuXCIpIEBJbnB1dCgpIGhpZGRlbiA9IGZhbHNlO1xuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5ieC0tc2lkZS1uYXYtLXJhaWxcIikgQElucHV0KCkgcmFpbCA9IGZhbHNlO1xuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5ieC0tc2lkZS1uYXYtLXV4XCIpIHV4ID0gdHJ1ZTtcblx0QElucHV0KCkgYWxsb3dFeHBhbnNpb24gPSBmYWxzZTtcblxuXHQvKipcblx0ICogTmF2aWdhdGlvbkl0ZW1zIGZyb20gdGhlIGhlYWRlciBuYXZpZ2F0aW9uIGNvbXBvbmVudCB3aGljaCBhcmUgZGlzcGxheWVkIG9uIHRoZSBzaWRlbmF2IHdoZW4gdGhlIHdpbmRvd1xuXHQgKiBpbm5lcldpZHRoIGlzIHNtYWxsIGVub3VnaC4gU2lkZW5hdiBpdGVtcyBhbmQgbWVudXMgYXJlIGNyZWF0ZWQgdXNpbmcgdGhlIG1vZGVsIHVzZWQgdG8gY3JlYXRlIGhlYWRlclxuXHQgKiBuYXZpZ2F0aW9uIGl0ZW1zLlxuXHQgKi9cblx0QElucHV0KCkgbmF2aWdhdGlvbkl0ZW1zOiBOYXZpZ2F0aW9uSXRlbVtdO1xuXG5cdGNvbnN0cnVjdG9yKHB1YmxpYyBpMThuOiBJMThuKSB7IH1cblxuXHR0b2dnbGUoKSB7XG5cdFx0dGhpcy5leHBhbmRlZCA9ICF0aGlzLmV4cGFuZGVkO1xuXHR9XG59XG4iXX0=
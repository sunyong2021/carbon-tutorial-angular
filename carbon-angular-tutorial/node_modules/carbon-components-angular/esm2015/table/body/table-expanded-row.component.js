/**
 *
 * carbon-angular v0.0.0 | table-expanded-row.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, HostBinding, Input } from "@angular/core";
export class TableExpandedRow {
    constructor() {
        this.skeleton = false;
        this.expandableRowClass = true;
        this.dataChildRow = true;
        this.expanded = false;
    }
    get displayStyle() {
        return this.expanded ? null : "none";
    }
    firstExpandedTemplateInRow(row) {
        const found = row.find(d => d.expandedTemplate);
        if (found) {
            return found.expandedTemplate;
        }
        return found;
    }
    firstExpandedDataInRow(row) {
        const found = row.find(d => d.expandedData);
        if (found) {
            return found.expandedData;
        }
        return found;
    }
}
TableExpandedRow.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line: component-selector
                selector: "[ibmTableExpandedRow]",
                template: `
		<td [attr.colspan]="row.length + 2">
			<ng-container *ngIf="!firstExpandedTemplateInRow(row)">
				{{firstExpandedDataInRow(row)}}
			</ng-container>
			<ng-template
				[ngTemplateOutlet]="firstExpandedTemplateInRow(row)"
				[ngTemplateOutletContext]="{data: firstExpandedDataInRow(row)}">
			</ng-template>
		</td>
	`
            }] }
];
TableExpandedRow.propDecorators = {
    row: [{ type: Input }],
    skeleton: [{ type: Input }],
    expandableRowClass: [{ type: HostBinding, args: ["class.bx--expandable-row",] }],
    dataChildRow: [{ type: HostBinding, args: ["attr.data-child-row",] }],
    expanded: [{ type: Input }],
    displayStyle: [{ type: HostBinding, args: ["style.display",] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUtZXhwYW5kZWQtcm93LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2NhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXIvdGFibGUvIiwic291cmNlcyI6WyJib2R5L3RhYmxlLWV4cGFuZGVkLXJvdy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNOLFNBQVMsRUFDVCxXQUFXLEVBQ1gsS0FBSyxFQUNMLE1BQU0sZUFBZSxDQUFDO0FBaUJ2QixNQUFNLE9BQU8sZ0JBQWdCO0lBZjdCO1FBa0JVLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFFZSx1QkFBa0IsR0FBRyxJQUFJLENBQUM7UUFFL0IsaUJBQVksR0FBRyxJQUFJLENBQUM7UUFFL0MsYUFBUSxHQUFHLEtBQUssQ0FBQztJQXFCM0IsQ0FBQztJQW5CQSxJQUFrQyxZQUFZO1FBQzdDLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7SUFDdEMsQ0FBQztJQUVELDBCQUEwQixDQUFDLEdBQUc7UUFDN0IsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ2hELElBQUksS0FBSyxFQUFFO1lBQ1YsT0FBTyxLQUFLLENBQUMsZ0JBQWdCLENBQUM7U0FDOUI7UUFDRCxPQUFPLEtBQUssQ0FBQztJQUNkLENBQUM7SUFFRCxzQkFBc0IsQ0FBQyxHQUFHO1FBQ3pCLE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDNUMsSUFBSSxLQUFLLEVBQUU7WUFDVixPQUFPLEtBQUssQ0FBQyxZQUFZLENBQUM7U0FDMUI7UUFDRCxPQUFPLEtBQUssQ0FBQztJQUNkLENBQUM7OztZQTVDRCxTQUFTLFNBQUM7Z0JBQ1YsK0NBQStDO2dCQUMvQyxRQUFRLEVBQUUsdUJBQXVCO2dCQUNqQyxRQUFRLEVBQUU7Ozs7Ozs7Ozs7RUFVVDthQUNEOzs7a0JBRUMsS0FBSzt1QkFFTCxLQUFLO2lDQUVMLFdBQVcsU0FBQywwQkFBMEI7MkJBRXRDLFdBQVcsU0FBQyxxQkFBcUI7dUJBRWpDLEtBQUs7MkJBRUwsV0FBVyxTQUFDLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuXHRDb21wb25lbnQsXG5cdEhvc3RCaW5kaW5nLFxuXHRJbnB1dFxufSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuXG5AQ29tcG9uZW50KHtcblx0Ly8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBjb21wb25lbnQtc2VsZWN0b3Jcblx0c2VsZWN0b3I6IFwiW2libVRhYmxlRXhwYW5kZWRSb3ddXCIsXG5cdHRlbXBsYXRlOiBgXG5cdFx0PHRkIFthdHRyLmNvbHNwYW5dPVwicm93Lmxlbmd0aCArIDJcIj5cblx0XHRcdDxuZy1jb250YWluZXIgKm5nSWY9XCIhZmlyc3RFeHBhbmRlZFRlbXBsYXRlSW5Sb3cocm93KVwiPlxuXHRcdFx0XHR7e2ZpcnN0RXhwYW5kZWREYXRhSW5Sb3cocm93KX19XG5cdFx0XHQ8L25nLWNvbnRhaW5lcj5cblx0XHRcdDxuZy10ZW1wbGF0ZVxuXHRcdFx0XHRbbmdUZW1wbGF0ZU91dGxldF09XCJmaXJzdEV4cGFuZGVkVGVtcGxhdGVJblJvdyhyb3cpXCJcblx0XHRcdFx0W25nVGVtcGxhdGVPdXRsZXRDb250ZXh0XT1cIntkYXRhOiBmaXJzdEV4cGFuZGVkRGF0YUluUm93KHJvdyl9XCI+XG5cdFx0XHQ8L25nLXRlbXBsYXRlPlxuXHRcdDwvdGQ+XG5cdGBcbn0pXG5leHBvcnQgY2xhc3MgVGFibGVFeHBhbmRlZFJvdyB7XG5cdEBJbnB1dCgpIHJvdzogYW55W107XG5cblx0QElucHV0KCkgc2tlbGV0b24gPSBmYWxzZTtcblxuXHRASG9zdEJpbmRpbmcoXCJjbGFzcy5ieC0tZXhwYW5kYWJsZS1yb3dcIikgZXhwYW5kYWJsZVJvd0NsYXNzID0gdHJ1ZTtcblxuXHRASG9zdEJpbmRpbmcoXCJhdHRyLmRhdGEtY2hpbGQtcm93XCIpIGRhdGFDaGlsZFJvdyA9IHRydWU7XG5cblx0QElucHV0KCkgZXhwYW5kZWQgPSBmYWxzZTtcblxuXHRASG9zdEJpbmRpbmcoXCJzdHlsZS5kaXNwbGF5XCIpIGdldCBkaXNwbGF5U3R5bGUoKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXhwYW5kZWQgPyBudWxsIDogXCJub25lXCI7XG5cdH1cblxuXHRmaXJzdEV4cGFuZGVkVGVtcGxhdGVJblJvdyhyb3cpIHtcblx0XHRjb25zdCBmb3VuZCA9IHJvdy5maW5kKGQgPT4gZC5leHBhbmRlZFRlbXBsYXRlKTtcblx0XHRpZiAoZm91bmQpIHtcblx0XHRcdHJldHVybiBmb3VuZC5leHBhbmRlZFRlbXBsYXRlO1xuXHRcdH1cblx0XHRyZXR1cm4gZm91bmQ7XG5cdH1cblxuXHRmaXJzdEV4cGFuZGVkRGF0YUluUm93KHJvdykge1xuXHRcdGNvbnN0IGZvdW5kID0gcm93LmZpbmQoZCA9PiBkLmV4cGFuZGVkRGF0YSk7XG5cdFx0aWYgKGZvdW5kKSB7XG5cdFx0XHRyZXR1cm4gZm91bmQuZXhwYW5kZWREYXRhO1xuXHRcdH1cblx0XHRyZXR1cm4gZm91bmQ7XG5cdH1cbn1cbiJdfQ==
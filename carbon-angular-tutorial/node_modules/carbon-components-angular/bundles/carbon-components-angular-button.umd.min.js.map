{"version":3,"sources":["ng://carbon-components-angular/button/button.directive.ts","ng://carbon-components-angular/button/button-set.component.ts","ng://carbon-components-angular/button/button.module.ts"],"sourcesContent":["import {\n\tDirective,\n\tHostBinding,\n\tInput,\n\tOnInit\n} from \"@angular/core\";\nimport { ButtonSize, ButtonType } from \"./button.types\";\n\n/**\n * A convenience directive for applying styling to a button.\n *\n * [See demo](../../?path=/story/button--basic)\n *\n * Example:\n *\n * ```html\n * <button ibmButton>A button</button>\n * <button ibmButton=\"secondary\">A secondary button</button>\n * ```\n *\n * See the [vanilla carbon docs](http://www.carbondesignsystem.com/components/button/code) for more detail.\n *\n * <example-url>../../iframe.html?id=button--basic</example-url>\n */\n@Directive({\n\tselector: \"[ibmButton]\"\n})\nexport class Button implements OnInit {\n\t/**\n\t * sets the button type\n\t */\n\t@Input() ibmButton: ButtonType = \"primary\";\n\t/**\n\t * Specify the size of the button\n\t */\n\t@Input() size: ButtonSize;\n\t/**\n\t * If assistive text is used, this specifies the placement.\n\t * Possible placements are `top`, `bottom`, `left`, `right`.\n\t * If assistive text is not used, this can be left undefined.\n\t */\n\t@Input() assistiveTextPlacement: \"top\" | \"bottom\" | \"left\" | \"right\" = \"top\";\n\t/**\n\t * If assistive text is used, this specifies the alignment.\n\t * Possible alignments are `center`, `start`, `end`.\n\t * If assistive text is not used, this can be left undefined.\n\t */\n\t@Input() assistiveTextAlignment: \"center\" | \"start\" | \"end\" = \"center\";\n\t/**\n\t * Set to `true` for a skeleton state button\n\t */\n\t@HostBinding(\"class.bx--skeleton\") @Input() skeleton = false;\n\t/**\n\t * Set to `true` if the button contains only an icon, and a span with `.bx--assistive-text` containing the content\n\t * For example:\n\t *\n\t * <button ibmButton=\"primary\" [iconOnly]=\"true\" [hasAssistiveText]=\"true\">\n\t *    <svg class=\"bx--btn__icon\" ibmIconCopy size=\"20\"></svg>\n\t *    <span class=\"bx--assistive-text\">Icon description</span>\n\t * </button>\n\t */\n\t@HostBinding(\"class.bx--btn--icon-only\") @Input() iconOnly = false;\n\n\t/**\n\t * Set to `true` for a \"expressive\" style button\n\t */\n\t@HostBinding(\"class.bx--btn--expressive\") @Input() isExpressive = false;\n\n\t// a whole lot of HostBindings ... this way we don't have to touch the elementRef directly\n\t@HostBinding(\"class.bx--btn\") get baseClass() {\n\t\treturn !this.toolbarAction;\n\t}\n\t@HostBinding(\"class.bx--btn--primary\") get primaryButton() {\n\t\treturn this.ibmButton === \"primary\";\n\t}\n\t@HostBinding(\"class.bx--btn--secondary\") get secondaryButton() {\n\t\treturn this.ibmButton === \"secondary\";\n\t}\n\t@HostBinding(\"class.bx--btn--tertiary\") get tertiaryButton() {\n\t\treturn this.ibmButton === \"tertiary\";\n\t}\n\t@HostBinding(\"class.bx--btn--ghost\") get ghostButton() {\n\t\treturn this.ibmButton === \"ghost\";\n\t}\n\t@HostBinding(\"class.bx--btn--danger\") get dangerButton() {\n\t\treturn this.ibmButton === \"danger\" || this.ibmButton === \"danger--primary\";\n\t}\n\t@HostBinding(\"class.bx--btn--danger--tertiary\") get dangerTertiary() {\n\t\treturn this.ibmButton === \"danger--tertiary\";\n\t}\n\t@HostBinding(\"class.bx--btn--danger--ghost\") get dangerGhost() {\n\t\treturn this.ibmButton === \"danger--ghost\";\n\t}\n\t@HostBinding(\"class.bx--btn--sm\") get smallSize() {\n\t\treturn this.size === \"sm\";\n\t}\n\t@HostBinding(\"class.bx--btn--lg\") get largeSize() {\n\t\treturn this.size === \"lg\";\n\t}\n\t@HostBinding(\"class.bx--btn--xl\") get extraLargeSize() {\n\t\treturn this.size === \"xl\";\n\t}\n\t@HostBinding(\"class.bx--btn--field\") get fieldSize() {\n\t\treturn this.size === \"field\";\n\t}\n\t@HostBinding(\"class.bx--toolbar-action\") toolbarAction = false;\n\t@HostBinding(\"class.bx--overflow-menu\") overflowMenu = false;\n\n\n\t/**\n\t * `hasAssistiveText` input specifies whether the button contains assistive text or not.\n\t * Assistive text can be utilized as follows:\n\t * ```typescript\n\t *\t<button\n\t *\t\tibmButton=\"tertiary\"\n\t *\t\t[iconOnly]=\"true\"\n\t *\t\t[hasAssistiveText]=\"true\"\n\t *\t\tassistiveTextPlacement=\"top\"\n\t *\t\tassistiveTextAlignment=\"center\">\n\t *\t\t<svg class=\"bx--btn__icon\" ibmIconCopy size=\"20\"></svg>\n\t *\t\t<span class=\"bx--assistive-text\">Icon description</span>\n\t *\t</button>\n\t * ```\n\t */\n\t@HostBinding(\"class.bx--tooltip__trigger\")\n\t@HostBinding(\"class.bx--tooltip--a11y\") @Input() hasAssistiveText = false;\n\n\t@HostBinding(\"class.bx--tooltip--align-center\") get isAssistiveTextCenterAligned() {\n\t\treturn this.hasAssistiveText && this.assistiveTextAlignment === \"center\";\n\t}\n\n\t@HostBinding(\"class.bx--tooltip--align-start\") get isAssistiveTextStartAligned() {\n\t\treturn this.hasAssistiveText && this.assistiveTextAlignment === \"start\";\n\t}\n\n\t@HostBinding(\"class.bx--tooltip--align-end\") get isAssistiveTextEndAligned() {\n\t\treturn this.hasAssistiveText && this.assistiveTextAlignment === \"end\";\n\t}\n\n\t@HostBinding(\"class.bx--tooltip--top\") get isAssistiveTextTopPositioned() {\n\t\treturn this.hasAssistiveText && this.assistiveTextPlacement === \"top\";\n\t}\n\n\t@HostBinding(\"class.bx--tooltip--bottom\") get isAssistiveTextBottomPositioned() {\n\t\treturn this.hasAssistiveText && this.assistiveTextPlacement === \"bottom\";\n\t}\n\n\t@HostBinding(\"class.bx--tooltip--left\") get isAssistiveTextLeftPositioned() {\n\t\treturn this.hasAssistiveText && this.assistiveTextPlacement === \"left\";\n\t}\n\n\t@HostBinding(\"class.bx--tooltip--right\") get isAssistiveTextRightPositioned() {\n\t\treturn this.hasAssistiveText && this.assistiveTextPlacement === \"right\";\n\t}\n\n\tngOnInit() {\n\t\tif (!this.ibmButton) {\n\t\t\tthis.ibmButton = \"primary\";\n\t\t}\n\t}\n}\n","import { Component, HostBinding } from \"@angular/core\";\n\n@Component({\n\tselector: \"ibm-button-set\",\n\ttemplate: \"<ng-content></ng-content>\"\n})\nexport class ButtonSet {\n\t@HostBinding(\"class.bx--btn-set\") buttonSetClass = true;\n}\n","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\n\nimport { Button } from \"./button.directive\";\nimport { ButtonSet } from \"./button-set.component\";\n\n@NgModule({\n\tdeclarations: [Button, ButtonSet],\n\texports: [Button, ButtonSet],\n\timports: [CommonModule]\n})\nexport class ButtonModule { }\n"],"names":["Button","Object","defineProperty","prototype","this","toolbarAction","ibmButton","size","hasAssistiveText","assistiveTextAlignment","assistiveTextPlacement","ngOnInit","Directive","args","selector","Input","HostBinding","type","skeleton","iconOnly","isExpressive","overflowMenu","Component","template","ButtonSet","buttonSetClass","NgModule","declarations","exports","imports","CommonModule","ButtonModule"],"mappings":"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"}
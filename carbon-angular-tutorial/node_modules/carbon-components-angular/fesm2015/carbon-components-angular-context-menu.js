/**
 *
 * carbon-angular v0.0.0 | carbon-components-angular-context-menu.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { CommonModule } from '@angular/common';
import { IconModule } from 'carbon-components-angular/icon';
import { ReplaySubject, Subscription } from 'rxjs';
import { Component, HostBinding, Injectable, EventEmitter, Input, Output, ElementRef, HostListener, ContentChild, Optional, NgModule } from '@angular/core';

class ContextMenuDividerComponent {
    constructor() {
        this.dividerClass = true;
        this.role = "separator";
    }
}
ContextMenuDividerComponent.decorators = [
    { type: Component, args: [{
                selector: "ibm-context-menu-divider",
                template: "",
                styles: [`
		:host {
			display: list-item;
			list-style: none;
		}
	`]
            }] }
];
ContextMenuDividerComponent.propDecorators = {
    dividerClass: [{ type: HostBinding, args: ["class.bx--context-menu-divider",] }],
    role: [{ type: HostBinding, args: ["attr.role",] }]
};

class ContextMenuSelectionService {
    constructor() {
        this.selectionSubject = new ReplaySubject(1);
        this.value = [];
        this.selectionObservable = this.selectionSubject.asObservable();
    }
    selectRadio(value) {
        if (!value) {
            return;
        }
        this.selectionSubject.next(value);
        this.value = [value];
    }
    selectCheckbox(value) {
        if (!value) {
            return;
        }
        if (this.value.includes(value)) {
            this.value = this.value.filter(v => v !== value);
        }
        else {
            this.value.push(value);
        }
        this.selectionSubject.next(this.value);
    }
    selectCheckboxes(value) {
        if (!value) {
            return;
        }
        this.value = value;
        this.selectionSubject.next(value);
    }
}
ContextMenuSelectionService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ContextMenuSelectionService.ctorParameters = () => [];

class ContextMenuGroupComponent {
    constructor(contextMenuSelectionService) {
        this.contextMenuSelectionService = contextMenuSelectionService;
        this.role = "none";
        this.label = null;
        this.value = [];
        this.type = null;
        this.valueChange = new EventEmitter();
        this.subscription = new Subscription();
    }
    ngOnInit() {
        const { selectionObservable } = this.contextMenuSelectionService;
        const subscription = selectionObservable.subscribe(value => {
            this.valueChange.emit(value);
        });
        this.subscription.add(subscription);
    }
    ngOnChanges(changes) {
        if (changes.value) {
            if (this.type === "radio") {
                this.contextMenuSelectionService.selectRadio(changes.value.currentValue);
            }
            if (this.type === "checkbox") {
                this.contextMenuSelectionService.selectCheckboxes(changes.value.currentValue);
            }
        }
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
}
ContextMenuGroupComponent.decorators = [
    { type: Component, args: [{
                selector: "ibm-context-menu-group",
                template: `
		<ul role="group" [attr.aria-label]="label">
			<ng-content></ng-content>
		</ul>
	`,
                providers: [ContextMenuSelectionService],
                styles: [`
		:host {
			display: list-item;
			list-style: none;
		}
	`]
            }] }
];
/** @nocollapse */
ContextMenuGroupComponent.ctorParameters = () => [
    { type: ContextMenuSelectionService }
];
ContextMenuGroupComponent.propDecorators = {
    role: [{ type: HostBinding, args: ["attr.role",] }],
    label: [{ type: Input }],
    value: [{ type: Input }],
    type: [{ type: Input }],
    valueChange: [{ type: Output }]
};

class ContextMenuComponent {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.root = true;
        this.open = false;
        this.position = {
            left: 0,
            top: 0
        };
    }
    ngOnChanges(changes) {
        if (changes.open && changes.open.currentValue) {
            this.focusMenu();
        }
    }
    focusMenu() {
        // wait until the next tick to let the DOM settle before changing the focus
        const list = this.elementRef.nativeElement.querySelector("ul");
        setTimeout(() => {
            if (this.root) {
                list.focus();
            }
            else {
                const firstOption = list.querySelector(".bx--context-menu-option");
                firstOption.focus();
            }
        });
    }
    handleNavigation(event) {
        const list = this.elementRef.nativeElement.querySelector("ul");
        const subMenus = Array.from(list.querySelectorAll("ul[role=menu]"));
        const menuItems = Array.from(list.querySelectorAll(".bx--context-menu-option")).filter(menuItem => {
            return !subMenus.some(subMenu => subMenu.contains(menuItem));
        });
        const currentIndex = menuItems.findIndex(menuItem => parseInt(menuItem.getAttribute("tabindex"), 10) === 0);
        const currentMenuItem = menuItems[currentIndex];
        switch (event.key) {
            case "ArrowDown": {
                if (document.activeElement === list) {
                    menuItems[0].focus();
                }
                else {
                    if (currentIndex !== -1 && currentIndex < menuItems.length - 1) {
                        menuItems[currentIndex + 1].focus();
                    }
                }
                break;
            }
            case "ArrowUp": {
                if (document.activeElement === list) {
                    menuItems[menuItems.length - 1].focus();
                }
                else {
                    if (currentIndex !== -1 && currentIndex > 0) {
                        menuItems[currentIndex - 1].focus();
                    }
                }
                break;
            }
            case "ArrowRight": {
                if (currentIndex !== -1 && subMenus.some(subMenu => currentMenuItem.contains(subMenu))) {
                    currentMenuItem.click();
                }
                break;
            }
            case "ArrowLeft": {
                const parent = currentMenuItem.parentElement.closest(".bx--context-menu-option");
                if (parent) {
                    parent.focus();
                }
                break;
            }
        }
    }
    getDimensions() {
        const element = this.elementRef.nativeElement.querySelector("ul");
        return element.getBoundingClientRect();
    }
}
ContextMenuComponent.decorators = [
    { type: Component, args: [{
                selector: "ibm-context-menu",
                template: `
		<ul
			class="bx--context-menu"
			[ngClass]="{
				'bx--context-menu--root': root,
				'bx--context-menu--open': open
			}"
			role="menu"
			tabindex="-1"
			[ngStyle]="{
				'left.px': position.left,
				'top.px': position.top
			}">
			<ng-content></ng-content>
		</ul>
	`
            }] }
];
/** @nocollapse */
ContextMenuComponent.ctorParameters = () => [
    { type: ElementRef }
];
ContextMenuComponent.propDecorators = {
    root: [{ type: Input }],
    open: [{ type: Input }],
    position: [{ type: Input }],
    handleNavigation: [{ type: HostListener, args: ["keydown", ["$event"],] }]
};

class ContextMenuItemComponent {
    constructor(elementRef, contextMenuSelectionService) {
        this.elementRef = elementRef;
        this.contextMenuSelectionService = contextMenuSelectionService;
        this.optionClass = true;
        this.role = "menuitem";
        this.tabindex = -1;
        this.ariaHasPopup = null;
        this.ariaExpanded = null;
        this.label = "";
        this.info = "";
        this.type = null;
        this.checked = false;
        this.icon = "";
        this.value = "";
        this.checkedChange = new EventEmitter();
        this.hasChildren = false;
        this.selectable = false;
        this.subscriptions = new Subscription();
    }
    ngOnInit() {
        switch (this.type) {
            case "checkbox": {
                this.role = "menuitemcheckbox";
                this.selectable = true;
                break;
            }
            case "radio": {
                this.role = "menuitemradio";
                this.selectable = true;
                break;
            }
            default: {
                this.role = "menuitem";
            }
        }
        if (this.type && this.contextMenuSelectionService && this.value) {
            const { selectionObservable } = this.contextMenuSelectionService;
            const subscription = selectionObservable.subscribe((value) => {
                if (this.type === "radio") {
                    this.handleSelection(value === this.value);
                }
                if (this.type === "checkbox") {
                    this.handleSelection(value.includes(this.value));
                }
            });
            this.subscriptions.add(subscription);
        }
    }
    ngAfterContentInit() {
        if (this.childContextMenu) {
            this.hasChildren = true;
            this.ariaHasPopup = true;
            this.ariaExpanded = false;
            this.childContextMenu.root = false;
        }
    }
    handleClick(event) {
        event.stopPropagation();
        if (this.hasChildren) {
            this.openSubMenu();
            this.childContextMenu.focusMenu();
        }
        if (this.type) {
            this.handleSelection(!this.checked);
        }
        if (this.contextMenuSelectionService) {
            if (this.type === "radio") {
                this.contextMenuSelectionService.selectRadio(this.value);
            }
            if (this.type === "checkbox") {
                this.contextMenuSelectionService.selectCheckbox(this.value);
            }
        }
    }
    handleSelection(selected) {
        this.checked = selected;
        this.checkedChange.emit(this.checked);
    }
    openSubMenu() {
        if (this.childContextMenu) {
            this.childContextMenu.open = true;
            this.ariaExpanded = true;
            const dimensions = this.getDimensions();
            this.childContextMenu.position.left = dimensions.left + dimensions.width;
            // subtract 4px to account for margins
            this.childContextMenu.position.top = dimensions.top - 4;
        }
    }
    closeSubMenu() {
        if (this.childContextMenu) {
            this.childContextMenu.open = false;
            this.ariaExpanded = false;
        }
    }
    handleMouseOver() {
        this.openSubMenu();
    }
    handleMouseOut() {
        this.closeSubMenu();
    }
    handleFocus() {
        this.tabindex = 0;
        if (this.hasChildren && this.ariaExpanded) {
            this.closeSubMenu();
        }
    }
    handleBlur() {
        this.tabindex = -1;
    }
    focusItem() {
        this.elementRef.nativeElement.focus();
    }
    getDimensions() {
        const element = this.elementRef.nativeElement.querySelector(".bx--context-menu-option__content");
        return element.getBoundingClientRect();
    }
    ngOnDestroy() {
        this.subscriptions.unsubscribe();
    }
}
ContextMenuItemComponent.decorators = [
    { type: Component, args: [{
                selector: "ibm-context-menu-item",
                template: `
		<div class="bx--context-menu-option__content">
			<div class="bx--context-menu-option__icon">
				<svg *ngIf="selectable && checked" ibmIcon="checkmark" size="16"></svg>
				<svg *ngIf="!selectable && icon" [ibmIcon]="icon" size="16"></svg>
			</div>
			<span class="bx--context-menu-option__label" [title]="label">{{label}}</span>
			<div class="bx--context-menu-option__info">
				{{info}}
				<svg *ngIf="hasChildren" ibmIcon="caret--right" size="16"></svg>
			</div>
		</div>
		<ng-content></ng-content>
	`,
                styles: [`
		:host {
			display: list-item;
			list-style: none;
		}
	`]
            }] }
];
/** @nocollapse */
ContextMenuItemComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ContextMenuSelectionService, decorators: [{ type: Optional }] }
];
ContextMenuItemComponent.propDecorators = {
    optionClass: [{ type: HostBinding, args: ["class.bx--context-menu-option",] }],
    role: [{ type: HostBinding, args: ["attr.role",] }],
    tabindex: [{ type: HostBinding, args: ["attr.tabindex",] }],
    ariaHasPopup: [{ type: HostBinding, args: ["attr.aria-haspopup",] }],
    ariaExpanded: [{ type: HostBinding, args: ["attr.aria-expanded",] }],
    label: [{ type: Input }],
    info: [{ type: Input }],
    type: [{ type: Input }],
    checked: [{ type: Input }],
    icon: [{ type: Input }],
    value: [{ type: Input }],
    checkedChange: [{ type: Output }],
    childContextMenu: [{ type: ContentChild, args: [ContextMenuComponent, { static: true },] }],
    handleClick: [{ type: HostListener, args: ["keydown.enter", ["$event"],] }, { type: HostListener, args: ["keydown.space", ["$event"],] }, { type: HostListener, args: ["click", ["$event"],] }],
    handleMouseOver: [{ type: HostListener, args: ["mouseover",] }],
    handleMouseOut: [{ type: HostListener, args: ["mouseout",] }],
    handleFocus: [{ type: HostListener, args: ["focus",] }],
    handleBlur: [{ type: HostListener, args: ["blur",] }]
};

class ContextMenuModule {
}
ContextMenuModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    ContextMenuDividerComponent,
                    ContextMenuGroupComponent,
                    ContextMenuItemComponent,
                    ContextMenuComponent
                ],
                exports: [
                    ContextMenuDividerComponent,
                    ContextMenuGroupComponent,
                    ContextMenuItemComponent,
                    ContextMenuComponent
                ],
                imports: [CommonModule, IconModule]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { ContextMenuSelectionService as ɵa, ContextMenuModule, ContextMenuDividerComponent, ContextMenuGroupComponent, ContextMenuItemComponent, ContextMenuComponent };

//# sourceMappingURL=carbon-components-angular-context-menu.js.map
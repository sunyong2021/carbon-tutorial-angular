import { __decorate, __metadata } from 'tslib';
import { Input, Component, ElementRef, Directive, NgModule } from '@angular/core';
import { getAttributes } from '@carbon/icon-helpers';

import * as ɵngcc0 from '@angular/core';
var HeatMapStocksComponent = /** @class */ (function () {
    function HeatMapStocksComponent() {
        this.focusable = false;
    }
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], HeatMapStocksComponent.prototype, "ariaLabel", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], HeatMapStocksComponent.prototype, "ariaLabelledby", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], HeatMapStocksComponent.prototype, "ariaHidden", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], HeatMapStocksComponent.prototype, "title", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], HeatMapStocksComponent.prototype, "focusable", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], HeatMapStocksComponent.prototype, "innerClass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], HeatMapStocksComponent.prototype, "size", void 0);
HeatMapStocksComponent.ɵfac = function HeatMapStocksComponent_Factory(t) { return new (t || HeatMapStocksComponent)(); };
HeatMapStocksComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: HeatMapStocksComponent, selectors: [["ibm-icon-heat-map-stocks"]], inputs: { focusable: "focusable", ariaLabel: "ariaLabel", ariaLabelledby: "ariaLabelledby", ariaHidden: "ariaHidden", title: "title", innerClass: "innerClass", size: "size" }, decls: 1, vars: 7, consts: [["ibmIconHeatMapStocks", "", 3, "size", "ariaLabel", "ariaLabelledby", "ariaHidden", "title", "isFocusable"]], template: function HeatMapStocksComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵnamespaceSVG();
        ɵngcc0.ɵɵelement(0, "svg", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("size", ctx.size)("ariaLabel", ctx.ariaLabel)("ariaLabelledby", ctx.ariaLabelledby)("ariaHidden", ctx.ariaHidden)("title", ctx.title)("isFocusable", ctx.focusable);
        ɵngcc0.ɵɵattribute("class", ctx.innerClass);
    } }, directives: function () { return [HeatMapStocksDirective]; }, encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HeatMapStocksComponent, [{
        type: Component,
        args: [{
                selector: "ibm-icon-heat-map-stocks",
                template: "\n    <svg\n      ibmIconHeatMapStocks\n      [size]=\"size\"\n      [ariaLabel]=\"ariaLabel\"\n      [ariaLabelledby]=\"ariaLabelledby\"\n      [ariaHidden]=\"ariaHidden\"\n      [title]=\"title\"\n      [isFocusable]=\"focusable\"\n      [attr.class]=\"innerClass\">\n    </svg>\n  "
            }]
    }], function () { return []; }, { focusable: [{
            type: Input
        }], ariaLabel: [{
            type: Input
        }], ariaLabelledby: [{
            type: Input
        }], ariaHidden: [{
            type: Input
        }], title: [{
            type: Input
        }], innerClass: [{
            type: Input
        }], size: [{
            type: Input
        }] }); })();
    return HeatMapStocksComponent;
}());
var HeatMapStocksDirective = /** @class */ (function () {
    function HeatMapStocksDirective(elementRef) {
        this.elementRef = elementRef;
        this.isFocusable = false;
        this.icons = {
            "32": {
                metadata: { "moduleName": "HeatMapStocks32", "filepath": "heat-map--stocks/32.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 32, "height": 32 }, "content": [{ "elem": "path", "attrs": { "d": "M27,3H5A2,2,0,0,0,3,5V27a2,2,0,0,0,2,2H27a2,2,0,0,0,2-2V5A2,2,0,0,0,27,3ZM9,21H5V17H9Zm2,2h4v4H11Zm6,0h4v4H17Zm0-8V11h4v4Zm4-6H17V5h4Zm2,2h4v4H23ZM15,5V15H5V5Zm8,22V17h4V27Z" } }], "name": "heat-map--stocks", "size": 32 }, "size": 32 },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M27,3H5A2,2,0,0,0,3,5V27a2,2,0,0,0,2,2H27a2,2,0,0,0,2-2V5A2,2,0,0,0,27,3ZM9,21H5V17H9Zm2,2h4v4H11Zm6,0h4v4H17Zm0-8V11h4v4Zm4-6H17V5h4Zm2,2h4v4H23ZM15,5V15H5V5Zm8,22V17h4V27Z\"></path></svg>"
            },
            "24": {
                metadata: { "moduleName": "HeatMapStocks24", "filepath": "heat-map--stocks/24.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 24, "height": 24 }, "content": [{ "elem": "path", "attrs": { "d": "M27,3H5A2,2,0,0,0,3,5V27a2,2,0,0,0,2,2H27a2,2,0,0,0,2-2V5A2,2,0,0,0,27,3ZM9,21H5V17H9Zm2,2h4v4H11Zm6,0h4v4H17Zm0-8V11h4v4Zm4-6H17V5h4Zm2,2h4v4H23ZM15,5V15H5V5Zm8,22V17h4V27Z" } }], "name": "heat-map--stocks", "size": 24 }, "size": 24 },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"24\" height=\"24\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M27,3H5A2,2,0,0,0,3,5V27a2,2,0,0,0,2,2H27a2,2,0,0,0,2-2V5A2,2,0,0,0,27,3ZM9,21H5V17H9Zm2,2h4v4H11Zm6,0h4v4H17Zm0-8V11h4v4Zm4-6H17V5h4Zm2,2h4v4H23ZM15,5V15H5V5Zm8,22V17h4V27Z\"></path></svg>"
            },
            "20": {
                metadata: { "moduleName": "HeatMapStocks20", "filepath": "heat-map--stocks/20.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 20, "height": 20 }, "content": [{ "elem": "path", "attrs": { "d": "M27,3H5A2,2,0,0,0,3,5V27a2,2,0,0,0,2,2H27a2,2,0,0,0,2-2V5A2,2,0,0,0,27,3ZM9,21H5V17H9Zm2,2h4v4H11Zm6,0h4v4H17Zm0-8V11h4v4Zm4-6H17V5h4Zm2,2h4v4H23ZM15,5V15H5V5Zm8,22V17h4V27Z" } }], "name": "heat-map--stocks", "size": 20 }, "size": 20 },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"20\" height=\"20\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M27,3H5A2,2,0,0,0,3,5V27a2,2,0,0,0,2,2H27a2,2,0,0,0,2-2V5A2,2,0,0,0,27,3ZM9,21H5V17H9Zm2,2h4v4H11Zm6,0h4v4H17Zm0-8V11h4v4Zm4-6H17V5h4Zm2,2h4v4H23ZM15,5V15H5V5Zm8,22V17h4V27Z\"></path></svg>"
            },
            "16": {
                metadata: { "moduleName": "HeatMapStocks16", "filepath": "heat-map--stocks/16.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 16, "height": 16 }, "content": [{ "elem": "path", "attrs": { "d": "M27,3H5A2,2,0,0,0,3,5V27a2,2,0,0,0,2,2H27a2,2,0,0,0,2-2V5A2,2,0,0,0,27,3ZM9,21H5V17H9Zm2,2h4v4H11Zm6,0h4v4H17Zm0-8V11h4v4Zm4-6H17V5h4Zm2,2h4v4H23ZM15,5V15H5V5Zm8,22V17h4V27Z" } }], "name": "heat-map--stocks", "size": 16 }, "size": 16 },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"16\" height=\"16\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M27,3H5A2,2,0,0,0,3,5V27a2,2,0,0,0,2,2H27a2,2,0,0,0,2-2V5A2,2,0,0,0,27,3ZM9,21H5V17H9Zm2,2h4v4H11Zm6,0h4v4H17Zm0-8V11h4v4Zm4-6H17V5h4Zm2,2h4v4H23ZM15,5V15H5V5Zm8,22V17h4V27Z\"></path></svg>"
            },
        };
    }
    HeatMapStocksDirective_1 = HeatMapStocksDirective;
    HeatMapStocksDirective.prototype.ngAfterViewInit = function () {
        var svg = this.elementRef.nativeElement;
        svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
        var icon = this.icons[this.size];
        var domParser = new DOMParser();
        var rawSVG = icon.svg;
        var svgElement = domParser.parseFromString(rawSVG, "image/svg+xml").documentElement;
        var node = svgElement.firstChild;
        while (node) {
            // importNode makes a clone of the node
            // this ensures we keep looping over the nodes in the parsed document
            svg.appendChild(svg.ownerDocument.importNode(node, true));
            node = node.nextSibling;
        }
        var attributes = getAttributes({
            width: icon.metadata.descriptor.attrs.height,
            height: icon.metadata.descriptor.attrs.height,
            viewBox: icon.metadata.descriptor.attrs.viewBox,
            title: this.title,
            "aria-label": this.ariaLabel,
            "aria-labelledby": this.ariaLabelledby,
            "aria-hidden": this.ariaHidden,
            focusable: this.isFocusable.toString()
        });
        var attrKeys = Object.keys(attributes);
        for (var i = 0; i < attrKeys.length; i++) {
            var key = attrKeys[i];
            var value = attributes[key];
            if (key === "title") {
                continue;
            }
            if (value) {
                svg.setAttribute(key, value);
            }
        }
        if (attributes.title) {
            var title = document.createElement("title");
            title.textContent = attributes.title;
            HeatMapStocksDirective_1.titleIdCounter++;
            title.setAttribute("id", "heat-map-stocks-" + HeatMapStocksDirective_1.titleIdCounter);
            svg.appendChild(title);
            svg.setAttribute("aria-labelledby", "heat-map-stocks-" + HeatMapStocksDirective_1.titleIdCounter);
        }
    };
    var HeatMapStocksDirective_1;
    HeatMapStocksDirective.titleIdCounter = 0;
    HeatMapStocksDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], HeatMapStocksDirective.prototype, "ariaLabel", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], HeatMapStocksDirective.prototype, "ariaLabelledby", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], HeatMapStocksDirective.prototype, "ariaHidden", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], HeatMapStocksDirective.prototype, "title", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], HeatMapStocksDirective.prototype, "isFocusable", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], HeatMapStocksDirective.prototype, "size", void 0);
    HeatMapStocksDirective = HeatMapStocksDirective_1 = __decorate([ __metadata("design:paramtypes", [ElementRef])
    ], HeatMapStocksDirective);
HeatMapStocksDirective.ɵfac = function HeatMapStocksDirective_Factory(t) { return new (t || HeatMapStocksDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
HeatMapStocksDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: HeatMapStocksDirective, selectors: [["", "ibmIconHeatMapStocks", ""]], inputs: { isFocusable: "isFocusable", ariaLabel: "ariaLabel", ariaLabelledby: "ariaLabelledby", ariaHidden: "ariaHidden", title: "title", size: "size" } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HeatMapStocksDirective, [{
        type: Directive,
        args: [{
                selector: "[ibmIconHeatMapStocks]"
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { isFocusable: [{
            type: Input
        }], ariaLabel: [{
            type: Input
        }], ariaLabelledby: [{
            type: Input
        }], ariaHidden: [{
            type: Input
        }], title: [{
            type: Input
        }], size: [{
            type: Input
        }] }); })();
    return HeatMapStocksDirective;
}());
var HeatMapStocksModule = /** @class */ (function () {
    function HeatMapStocksModule() {
    }
HeatMapStocksModule.ɵfac = function HeatMapStocksModule_Factory(t) { return new (t || HeatMapStocksModule)(); };
HeatMapStocksModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: HeatMapStocksModule });
HeatMapStocksModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HeatMapStocksModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    HeatMapStocksComponent,
                    HeatMapStocksDirective,
                ],
                exports: [
                    HeatMapStocksComponent,
                    HeatMapStocksDirective,
                ]
            }]
    }], function () { return []; }, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(HeatMapStocksModule, { declarations: [HeatMapStocksComponent, HeatMapStocksDirective], exports: [HeatMapStocksComponent, HeatMapStocksDirective] }); })();
    return HeatMapStocksModule;
}());

export { HeatMapStocksComponent, HeatMapStocksDirective, HeatMapStocksModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
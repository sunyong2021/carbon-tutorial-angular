import { __decorate, __metadata } from 'tslib';
import { Input, Component, ElementRef, Directive, NgModule } from '@angular/core';
import { getAttributes } from '@carbon/icon-helpers';

import * as ɵngcc0 from '@angular/core';
var TextSmallCapsComponent = /** @class */ (function () {
    function TextSmallCapsComponent() {
        this.focusable = false;
    }
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], TextSmallCapsComponent.prototype, "ariaLabel", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], TextSmallCapsComponent.prototype, "ariaLabelledby", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], TextSmallCapsComponent.prototype, "ariaHidden", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], TextSmallCapsComponent.prototype, "title", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], TextSmallCapsComponent.prototype, "focusable", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], TextSmallCapsComponent.prototype, "innerClass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], TextSmallCapsComponent.prototype, "size", void 0);
TextSmallCapsComponent.ɵfac = function TextSmallCapsComponent_Factory(t) { return new (t || TextSmallCapsComponent)(); };
TextSmallCapsComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: TextSmallCapsComponent, selectors: [["ibm-icon-text-small-caps"]], inputs: { focusable: "focusable", ariaLabel: "ariaLabel", ariaLabelledby: "ariaLabelledby", ariaHidden: "ariaHidden", title: "title", innerClass: "innerClass", size: "size" }, decls: 1, vars: 7, consts: [["ibmIconTextSmallCaps", "", 3, "size", "ariaLabel", "ariaLabelledby", "ariaHidden", "title", "isFocusable"]], template: function TextSmallCapsComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵnamespaceSVG();
        ɵngcc0.ɵɵelement(0, "svg", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("size", ctx.size)("ariaLabel", ctx.ariaLabel)("ariaLabelledby", ctx.ariaLabelledby)("ariaHidden", ctx.ariaHidden)("title", ctx.title)("isFocusable", ctx.focusable);
        ɵngcc0.ɵɵattribute("class", ctx.innerClass);
    } }, directives: function () { return [TextSmallCapsDirective]; }, encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TextSmallCapsComponent, [{
        type: Component,
        args: [{
                selector: "ibm-icon-text-small-caps",
                template: "\n    <svg\n      ibmIconTextSmallCaps\n      [size]=\"size\"\n      [ariaLabel]=\"ariaLabel\"\n      [ariaLabelledby]=\"ariaLabelledby\"\n      [ariaHidden]=\"ariaHidden\"\n      [title]=\"title\"\n      [isFocusable]=\"focusable\"\n      [attr.class]=\"innerClass\">\n    </svg>\n  "
            }]
    }], function () { return []; }, { focusable: [{
            type: Input
        }], ariaLabel: [{
            type: Input
        }], ariaLabelledby: [{
            type: Input
        }], ariaHidden: [{
            type: Input
        }], title: [{
            type: Input
        }], innerClass: [{
            type: Input
        }], size: [{
            type: Input
        }] }); })();
    return TextSmallCapsComponent;
}());
var TextSmallCapsDirective = /** @class */ (function () {
    function TextSmallCapsDirective(elementRef) {
        this.elementRef = elementRef;
        this.isFocusable = false;
        this.icons = {
            "32": {
                metadata: { "moduleName": "TextSmallCaps32", "filepath": "text--small-caps/32.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 32, "height": 32 }, "content": [{ "elem": "path", "attrs": { "d": "M23 27L23 15 18 15 18 13 30 13 30 15 25 15 25 27 23 27z" } }, { "elem": "path", "attrs": { "d": "M11 27L11 8 2 8 2 6 22 6 22 8 13 8 13 27 11 27z" } }], "name": "text--small-caps", "size": 32 }, "size": 32 },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M23 27L23 15 18 15 18 13 30 13 30 15 25 15 25 27 23 27z\"></path><path d=\"M11 27L11 8 2 8 2 6 22 6 22 8 13 8 13 27 11 27z\"></path></svg>"
            },
            "24": {
                metadata: { "moduleName": "TextSmallCaps24", "filepath": "text--small-caps/24.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 24, "height": 24 }, "content": [{ "elem": "path", "attrs": { "d": "M23 27L23 15 18 15 18 13 30 13 30 15 25 15 25 27 23 27z" } }, { "elem": "path", "attrs": { "d": "M11 27L11 8 2 8 2 6 22 6 22 8 13 8 13 27 11 27z" } }], "name": "text--small-caps", "size": 24 }, "size": 24 },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"24\" height=\"24\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M23 27L23 15 18 15 18 13 30 13 30 15 25 15 25 27 23 27z\"></path><path d=\"M11 27L11 8 2 8 2 6 22 6 22 8 13 8 13 27 11 27z\"></path></svg>"
            },
            "20": {
                metadata: { "moduleName": "TextSmallCaps20", "filepath": "text--small-caps/20.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 20, "height": 20 }, "content": [{ "elem": "path", "attrs": { "d": "M23 27L23 15 18 15 18 13 30 13 30 15 25 15 25 27 23 27z" } }, { "elem": "path", "attrs": { "d": "M11 27L11 8 2 8 2 6 22 6 22 8 13 8 13 27 11 27z" } }], "name": "text--small-caps", "size": 20 }, "size": 20 },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"20\" height=\"20\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M23 27L23 15 18 15 18 13 30 13 30 15 25 15 25 27 23 27z\"></path><path d=\"M11 27L11 8 2 8 2 6 22 6 22 8 13 8 13 27 11 27z\"></path></svg>"
            },
            "16": {
                metadata: { "moduleName": "TextSmallCaps16", "filepath": "text--small-caps/16.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 16, "height": 16 }, "content": [{ "elem": "path", "attrs": { "d": "M23 27L23 15 18 15 18 13 30 13 30 15 25 15 25 27 23 27z" } }, { "elem": "path", "attrs": { "d": "M11 27L11 8 2 8 2 6 22 6 22 8 13 8 13 27 11 27z" } }], "name": "text--small-caps", "size": 16 }, "size": 16 },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"16\" height=\"16\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M23 27L23 15 18 15 18 13 30 13 30 15 25 15 25 27 23 27z\"></path><path d=\"M11 27L11 8 2 8 2 6 22 6 22 8 13 8 13 27 11 27z\"></path></svg>"
            },
        };
    }
    TextSmallCapsDirective_1 = TextSmallCapsDirective;
    TextSmallCapsDirective.prototype.ngAfterViewInit = function () {
        var svg = this.elementRef.nativeElement;
        svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
        var icon = this.icons[this.size];
        var domParser = new DOMParser();
        var rawSVG = icon.svg;
        var svgElement = domParser.parseFromString(rawSVG, "image/svg+xml").documentElement;
        var node = svgElement.firstChild;
        while (node) {
            // importNode makes a clone of the node
            // this ensures we keep looping over the nodes in the parsed document
            svg.appendChild(svg.ownerDocument.importNode(node, true));
            node = node.nextSibling;
        }
        var attributes = getAttributes({
            width: icon.metadata.descriptor.attrs.height,
            height: icon.metadata.descriptor.attrs.height,
            viewBox: icon.metadata.descriptor.attrs.viewBox,
            title: this.title,
            "aria-label": this.ariaLabel,
            "aria-labelledby": this.ariaLabelledby,
            "aria-hidden": this.ariaHidden,
            focusable: this.isFocusable.toString()
        });
        var attrKeys = Object.keys(attributes);
        for (var i = 0; i < attrKeys.length; i++) {
            var key = attrKeys[i];
            var value = attributes[key];
            if (key === "title") {
                continue;
            }
            if (value) {
                svg.setAttribute(key, value);
            }
        }
        if (attributes.title) {
            var title = document.createElement("title");
            title.textContent = attributes.title;
            TextSmallCapsDirective_1.titleIdCounter++;
            title.setAttribute("id", "text-small-caps-" + TextSmallCapsDirective_1.titleIdCounter);
            svg.appendChild(title);
            svg.setAttribute("aria-labelledby", "text-small-caps-" + TextSmallCapsDirective_1.titleIdCounter);
        }
    };
    var TextSmallCapsDirective_1;
    TextSmallCapsDirective.titleIdCounter = 0;
    TextSmallCapsDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], TextSmallCapsDirective.prototype, "ariaLabel", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], TextSmallCapsDirective.prototype, "ariaLabelledby", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], TextSmallCapsDirective.prototype, "ariaHidden", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], TextSmallCapsDirective.prototype, "title", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], TextSmallCapsDirective.prototype, "isFocusable", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], TextSmallCapsDirective.prototype, "size", void 0);
    TextSmallCapsDirective = TextSmallCapsDirective_1 = __decorate([ __metadata("design:paramtypes", [ElementRef])
    ], TextSmallCapsDirective);
TextSmallCapsDirective.ɵfac = function TextSmallCapsDirective_Factory(t) { return new (t || TextSmallCapsDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
TextSmallCapsDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: TextSmallCapsDirective, selectors: [["", "ibmIconTextSmallCaps", ""]], inputs: { isFocusable: "isFocusable", ariaLabel: "ariaLabel", ariaLabelledby: "ariaLabelledby", ariaHidden: "ariaHidden", title: "title", size: "size" } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TextSmallCapsDirective, [{
        type: Directive,
        args: [{
                selector: "[ibmIconTextSmallCaps]"
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { isFocusable: [{
            type: Input
        }], ariaLabel: [{
            type: Input
        }], ariaLabelledby: [{
            type: Input
        }], ariaHidden: [{
            type: Input
        }], title: [{
            type: Input
        }], size: [{
            type: Input
        }] }); })();
    return TextSmallCapsDirective;
}());
var TextSmallCapsModule = /** @class */ (function () {
    function TextSmallCapsModule() {
    }
TextSmallCapsModule.ɵfac = function TextSmallCapsModule_Factory(t) { return new (t || TextSmallCapsModule)(); };
TextSmallCapsModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: TextSmallCapsModule });
TextSmallCapsModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TextSmallCapsModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    TextSmallCapsComponent,
                    TextSmallCapsDirective,
                ],
                exports: [
                    TextSmallCapsComponent,
                    TextSmallCapsDirective,
                ]
            }]
    }], function () { return []; }, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TextSmallCapsModule, { declarations: [TextSmallCapsComponent, TextSmallCapsDirective], exports: [TextSmallCapsComponent, TextSmallCapsDirective] }); })();
    return TextSmallCapsModule;
}());

export { TextSmallCapsComponent, TextSmallCapsDirective, TextSmallCapsModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
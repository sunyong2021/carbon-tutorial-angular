import { __decorate, __metadata } from 'tslib';
import { Input, Component, ElementRef, Directive, NgModule } from '@angular/core';
import { getAttributes } from '@carbon/icon-helpers';

import * as ɵngcc0 from '@angular/core';
var StackLimitationComponent = /** @class */ (function () {
    function StackLimitationComponent() {
        this.focusable = false;
    }
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], StackLimitationComponent.prototype, "ariaLabel", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], StackLimitationComponent.prototype, "ariaLabelledby", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], StackLimitationComponent.prototype, "ariaHidden", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], StackLimitationComponent.prototype, "title", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], StackLimitationComponent.prototype, "focusable", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], StackLimitationComponent.prototype, "innerClass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], StackLimitationComponent.prototype, "size", void 0);
StackLimitationComponent.ɵfac = function StackLimitationComponent_Factory(t) { return new (t || StackLimitationComponent)(); };
StackLimitationComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: StackLimitationComponent, selectors: [["ibm-icon-stack-limitation"]], inputs: { focusable: "focusable", ariaLabel: "ariaLabel", ariaLabelledby: "ariaLabelledby", ariaHidden: "ariaHidden", title: "title", innerClass: "innerClass", size: "size" }, decls: 1, vars: 7, consts: [["ibmIconStackLimitation", "", 3, "size", "ariaLabel", "ariaLabelledby", "ariaHidden", "title", "isFocusable"]], template: function StackLimitationComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵnamespaceSVG();
        ɵngcc0.ɵɵelement(0, "svg", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("size", ctx.size)("ariaLabel", ctx.ariaLabel)("ariaLabelledby", ctx.ariaLabelledby)("ariaHidden", ctx.ariaHidden)("title", ctx.title)("isFocusable", ctx.focusable);
        ɵngcc0.ɵɵattribute("class", ctx.innerClass);
    } }, directives: function () { return [StackLimitationDirective]; }, encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(StackLimitationComponent, [{
        type: Component,
        args: [{
                selector: "ibm-icon-stack-limitation",
                template: "\n    <svg\n      ibmIconStackLimitation\n      [size]=\"size\"\n      [ariaLabel]=\"ariaLabel\"\n      [ariaLabelledby]=\"ariaLabelledby\"\n      [ariaHidden]=\"ariaHidden\"\n      [title]=\"title\"\n      [isFocusable]=\"focusable\"\n      [attr.class]=\"innerClass\">\n    </svg>\n  "
            }]
    }], function () { return []; }, { focusable: [{
            type: Input
        }], ariaLabel: [{
            type: Input
        }], ariaLabelledby: [{
            type: Input
        }], ariaHidden: [{
            type: Input
        }], title: [{
            type: Input
        }], innerClass: [{
            type: Input
        }], size: [{
            type: Input
        }] }); })();
    return StackLimitationComponent;
}());
var StackLimitationDirective = /** @class */ (function () {
    function StackLimitationDirective(elementRef) {
        this.elementRef = elementRef;
        this.isFocusable = false;
        this.icons = {
            "32": {
                metadata: { "moduleName": "StackLimitation32", "filepath": "stack-limitation/32.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 32, "height": 32 }, "content": [{ "elem": "path", "attrs": { "d": "M8 22H16V30H8zM24 12H20v2h4v2H21v2h3v2H20v2h4a2.0027 2.0027 0 002-2V14A2.0023 2.0023 0 0024 12zM16 20H8V12h8zm-6-2h4V14H10zM16 3.41L14.59 2 12 4.59 9.41 2 8 3.41 10.59 6 8 8.59 9.41 10 12 7.41 14.59 10 16 8.59 13.41 6 16 3.41z" } }], "name": "stack-limitation", "size": 32 }, "size": 32 },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M8 22H16V30H8zM24 12H20v2h4v2H21v2h3v2H20v2h4a2.0027 2.0027 0 002-2V14A2.0023 2.0023 0 0024 12zM16 20H8V12h8zm-6-2h4V14H10zM16 3.41L14.59 2 12 4.59 9.41 2 8 3.41 10.59 6 8 8.59 9.41 10 12 7.41 14.59 10 16 8.59 13.41 6 16 3.41z\"></path></svg>"
            },
            "24": {
                metadata: { "moduleName": "StackLimitation24", "filepath": "stack-limitation/24.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 24, "height": 24 }, "content": [{ "elem": "path", "attrs": { "d": "M8 22H16V30H8zM24 12H20v2h4v2H21v2h3v2H20v2h4a2.0027 2.0027 0 002-2V14A2.0023 2.0023 0 0024 12zM16 20H8V12h8zm-6-2h4V14H10zM16 3.41L14.59 2 12 4.59 9.41 2 8 3.41 10.59 6 8 8.59 9.41 10 12 7.41 14.59 10 16 8.59 13.41 6 16 3.41z" } }], "name": "stack-limitation", "size": 24 }, "size": 24 },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"24\" height=\"24\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M8 22H16V30H8zM24 12H20v2h4v2H21v2h3v2H20v2h4a2.0027 2.0027 0 002-2V14A2.0023 2.0023 0 0024 12zM16 20H8V12h8zm-6-2h4V14H10zM16 3.41L14.59 2 12 4.59 9.41 2 8 3.41 10.59 6 8 8.59 9.41 10 12 7.41 14.59 10 16 8.59 13.41 6 16 3.41z\"></path></svg>"
            },
            "20": {
                metadata: { "moduleName": "StackLimitation20", "filepath": "stack-limitation/20.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 20, "height": 20 }, "content": [{ "elem": "path", "attrs": { "d": "M8 22H16V30H8zM24 12H20v2h4v2H21v2h3v2H20v2h4a2.0027 2.0027 0 002-2V14A2.0023 2.0023 0 0024 12zM16 20H8V12h8zm-6-2h4V14H10zM16 3.41L14.59 2 12 4.59 9.41 2 8 3.41 10.59 6 8 8.59 9.41 10 12 7.41 14.59 10 16 8.59 13.41 6 16 3.41z" } }], "name": "stack-limitation", "size": 20 }, "size": 20 },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"20\" height=\"20\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M8 22H16V30H8zM24 12H20v2h4v2H21v2h3v2H20v2h4a2.0027 2.0027 0 002-2V14A2.0023 2.0023 0 0024 12zM16 20H8V12h8zm-6-2h4V14H10zM16 3.41L14.59 2 12 4.59 9.41 2 8 3.41 10.59 6 8 8.59 9.41 10 12 7.41 14.59 10 16 8.59 13.41 6 16 3.41z\"></path></svg>"
            },
            "16": {
                metadata: { "moduleName": "StackLimitation16", "filepath": "stack-limitation/16.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 16, "height": 16 }, "content": [{ "elem": "path", "attrs": { "d": "M8 22H16V30H8zM24 12H20v2h4v2H21v2h3v2H20v2h4a2.0027 2.0027 0 002-2V14A2.0023 2.0023 0 0024 12zM16 20H8V12h8zm-6-2h4V14H10zM16 3.41L14.59 2 12 4.59 9.41 2 8 3.41 10.59 6 8 8.59 9.41 10 12 7.41 14.59 10 16 8.59 13.41 6 16 3.41z" } }], "name": "stack-limitation", "size": 16 }, "size": 16 },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"16\" height=\"16\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M8 22H16V30H8zM24 12H20v2h4v2H21v2h3v2H20v2h4a2.0027 2.0027 0 002-2V14A2.0023 2.0023 0 0024 12zM16 20H8V12h8zm-6-2h4V14H10zM16 3.41L14.59 2 12 4.59 9.41 2 8 3.41 10.59 6 8 8.59 9.41 10 12 7.41 14.59 10 16 8.59 13.41 6 16 3.41z\"></path></svg>"
            },
        };
    }
    StackLimitationDirective_1 = StackLimitationDirective;
    StackLimitationDirective.prototype.ngAfterViewInit = function () {
        var svg = this.elementRef.nativeElement;
        svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
        var icon = this.icons[this.size];
        var domParser = new DOMParser();
        var rawSVG = icon.svg;
        var svgElement = domParser.parseFromString(rawSVG, "image/svg+xml").documentElement;
        var node = svgElement.firstChild;
        while (node) {
            // importNode makes a clone of the node
            // this ensures we keep looping over the nodes in the parsed document
            svg.appendChild(svg.ownerDocument.importNode(node, true));
            node = node.nextSibling;
        }
        var attributes = getAttributes({
            width: icon.metadata.descriptor.attrs.height,
            height: icon.metadata.descriptor.attrs.height,
            viewBox: icon.metadata.descriptor.attrs.viewBox,
            title: this.title,
            "aria-label": this.ariaLabel,
            "aria-labelledby": this.ariaLabelledby,
            "aria-hidden": this.ariaHidden,
            focusable: this.isFocusable.toString()
        });
        var attrKeys = Object.keys(attributes);
        for (var i = 0; i < attrKeys.length; i++) {
            var key = attrKeys[i];
            var value = attributes[key];
            if (key === "title") {
                continue;
            }
            if (value) {
                svg.setAttribute(key, value);
            }
        }
        if (attributes.title) {
            var title = document.createElement("title");
            title.textContent = attributes.title;
            StackLimitationDirective_1.titleIdCounter++;
            title.setAttribute("id", "stack-limitation-" + StackLimitationDirective_1.titleIdCounter);
            svg.appendChild(title);
            svg.setAttribute("aria-labelledby", "stack-limitation-" + StackLimitationDirective_1.titleIdCounter);
        }
    };
    var StackLimitationDirective_1;
    StackLimitationDirective.titleIdCounter = 0;
    StackLimitationDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], StackLimitationDirective.prototype, "ariaLabel", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], StackLimitationDirective.prototype, "ariaLabelledby", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], StackLimitationDirective.prototype, "ariaHidden", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], StackLimitationDirective.prototype, "title", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], StackLimitationDirective.prototype, "isFocusable", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], StackLimitationDirective.prototype, "size", void 0);
    StackLimitationDirective = StackLimitationDirective_1 = __decorate([ __metadata("design:paramtypes", [ElementRef])
    ], StackLimitationDirective);
StackLimitationDirective.ɵfac = function StackLimitationDirective_Factory(t) { return new (t || StackLimitationDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
StackLimitationDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: StackLimitationDirective, selectors: [["", "ibmIconStackLimitation", ""]], inputs: { isFocusable: "isFocusable", ariaLabel: "ariaLabel", ariaLabelledby: "ariaLabelledby", ariaHidden: "ariaHidden", title: "title", size: "size" } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(StackLimitationDirective, [{
        type: Directive,
        args: [{
                selector: "[ibmIconStackLimitation]"
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { isFocusable: [{
            type: Input
        }], ariaLabel: [{
            type: Input
        }], ariaLabelledby: [{
            type: Input
        }], ariaHidden: [{
            type: Input
        }], title: [{
            type: Input
        }], size: [{
            type: Input
        }] }); })();
    return StackLimitationDirective;
}());
var StackLimitationModule = /** @class */ (function () {
    function StackLimitationModule() {
    }
StackLimitationModule.ɵfac = function StackLimitationModule_Factory(t) { return new (t || StackLimitationModule)(); };
StackLimitationModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: StackLimitationModule });
StackLimitationModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(StackLimitationModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    StackLimitationComponent,
                    StackLimitationDirective,
                ],
                exports: [
                    StackLimitationComponent,
                    StackLimitationDirective,
                ]
            }]
    }], function () { return []; }, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(StackLimitationModule, { declarations: [StackLimitationComponent, StackLimitationDirective], exports: [StackLimitationComponent, StackLimitationDirective] }); })();
    return StackLimitationModule;
}());

export { StackLimitationComponent, StackLimitationDirective, StackLimitationModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,